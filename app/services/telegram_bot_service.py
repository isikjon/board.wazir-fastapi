import asyncio
import logging
from typing import Dict, Optional, Any
from contextlib import asynccontextmanager
from dataclasses import dataclass
import aiohttp
import random
import string
from datetime import datetime, timedelta

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import Conflict, Forbidden, BadRequest, TimedOut, NetworkError

from config import settings
from app.services.telegram_auth_service import telegram_auth_service

logger = logging.getLogger(__name__)

@dataclass
class SMSResult:
    success: bool
    message: str
    code: Optional[str] = None
    data: Optional[Dict[str, Any]] = None

class TelegramBotService:
    def __init__(self):
        self.application = None
        self.user_states: Dict[int, str] = {}
        self.is_running = False
        self.bot_task = None
        self.bot_token = settings.TELEGRAM_BOT_TOKEN
        self.bot_username = settings.TELEGRAM_BOT_USERNAME
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        self.codes_storage = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
        
    async def start_bot(self):
        if not settings.TELEGRAM_BOT_TOKEN:
            logger.warning("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        if self.is_running:
            logger.warning("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        try:
            self.application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
            
            self.application.add_handler(CommandHandler("start", self._handle_start))
            self.application.add_handler(MessageHandler(filters.CONTACT, self._handle_contact))
            self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_text))
            
            await self.application.initialize()
            await self.application.start()
            
            try:
                await self.application.bot.delete_webhook(drop_pending_updates=True)
                logger.info("Webhook —Å–±—Ä–æ—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å webhook: {e}")
            
            self.is_running = True
            logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            self.bot_task = asyncio.create_task(self._run_polling())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            self.is_running = False
            
    async def _run_polling(self):
        try:
            await self.application.updater.start_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True
            )
        except Conflict as e:
            logger.error(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç Telegram –±–æ—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä): {e}")
            self.is_running = False
        except (Forbidden, BadRequest) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞: {e}")
            self.is_running = False
        except (TimedOut, NetworkError) as e:
            logger.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞ (–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ): {e}")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ polling Telegram –±–æ—Ç–∞: {e}")
            self.is_running = False
            
    async def stop_bot(self):
        if not self.is_running or not self.application:
            return
            
        try:
            if self.bot_task:
                self.bot_task.cancel()
                try:
                    await self.bot_task
                except asyncio.CancelledError:
                    pass
                    
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
            self.is_running = False
            logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –±–æ—Ç–∞: {e}")
    
    async def force_stop_webhook(self):
        try:
            if self.application and self.application.bot:
                await self.application.bot.delete_webhook(drop_pending_updates=True)
                logger.info("Webhook –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è webhook: {e}")
    
    async def _handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user_id = update.effective_user.id
        session_id = context.args[0] if context.args else None
        
        if session_id:
            self.user_states[user_id] = f"awaiting_phone:{session_id}"
            
            keyboard = [[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            
            await update.message.reply_text(
                "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram'"
            )

    async def _handle_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user_id = update.effective_user.id
        
        if user_id not in self.user_states:
            await update.message.reply_text(
                "–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                reply_markup=ReplyKeyboardRemove()
            )
            return
        
        state = self.user_states[user_id]
        if not state.startswith("awaiting_phone:"):
            await update.message.reply_text(
                "–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                reply_markup=ReplyKeyboardRemove()
            )
            return
        
        session_id = state.split(":", 1)[1]
        contact = update.message.contact
        
        if contact.user_id != user_id:
            await update.message.reply_text(
                "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                reply_markup=ReplyKeyboardRemove()
            )
            return
        
        phone = contact.phone_number
        
        result = await telegram_auth_service.verify_phone_from_telegram(
            user_id, phone, session_id
        )
        
        if result.success:
            await update.message.reply_text(
                f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å–∞–π—Ç–µ.",
                reply_markup=ReplyKeyboardRemove()
            )
            del self.user_states[user_id]
        else:
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞: {result.message}",
                reply_markup=ReplyKeyboardRemove()
            )
            del self.user_states[user_id]

    async def _handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await update.message.reply_text(
            "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º'"
        )

    def generate_code(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 4-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞"""
        return ''.join(random.choices('0123456789', k=4))
    
    async def send_code_to_telegram(self, phone: str, chat_id: Optional[str] = None) -> SMSResult:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ Telegram
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
            code = self.generate_code()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            self.codes_storage[phone] = {
                'code': code,
                'timestamp': datetime.now(),
                'chat_id': chat_id
            }
            
            # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å chat_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
            if chat_id:
                message = f"üîê –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}\n\n–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç."
                
                url = f"{self.base_url}/sendMessage"
                payload = {
                    'chat_id': chat_id,
                    'text': message,
                    'parse_mode': 'HTML'
                }
                
                async with aiohttp.ClientSession() as session:
                    async with session.post(url, json=payload) as response:
                        if response.status == 200:
                            return SMSResult(
                                success=True,
                                message=f"SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram: {code}",
                                code=code,
                                data={'chat_id': chat_id}
                            )
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status}")
                            return SMSResult(
                                success=False,
                                message="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"
                            )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç chat_id, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
                return SMSResult(
                    success=True,
                    message=f"SMS –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {code}",
                    code=code,
                    data={'phone': phone}
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –≤ Telegram: {str(e)}")
            return SMSResult(
                success=False,
                message=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}"
            )
    
    def verify_code(self, phone: str, code: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        """
        if phone not in self.codes_storage:
            return False
        
        stored_data = self.codes_storage[phone]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–æ–¥ (5 –º–∏–Ω—É—Ç)
        if datetime.now() - stored_data['timestamp'] > timedelta(minutes=5):
            del self.codes_storage[phone]
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        if stored_data['code'] == code:
            # –£–¥–∞–ª—è–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            del self.codes_storage[phone]
            return True
        
        return False
    
    async def get_bot_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
        """
        try:
            url = f"{self.base_url}/getMe"
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        return data
                    else:
                        return {"error": f"HTTP {response.status}"}
        except Exception as e:
            return {"error": str(e)}

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
telegram_bot_service = TelegramBotService() 