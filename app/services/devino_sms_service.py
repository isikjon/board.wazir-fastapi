import httpx
import logging
import random
import string
from typing import Dict, Any, Optional, Tuple
from config import settings

# –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–π –ª–æ–≥–≥–µ—Ä –¥–ª—è Devino SMS
logger = logging.getLogger("devino_sms")
logger.setLevel(logging.DEBUG)

class ColoredFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —Ü–≤–µ—Ç–∞–º–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
    
    COLORS = {
        'DEBUG': '\033[36m',    # –ì–æ–ª—É–±–æ–π
        'INFO': '\033[32m',     # –ó–µ–ª–µ–Ω—ã–π  
        'WARNING': '\033[33m',  # –ñ–µ–ª—Ç—ã–π
        'ERROR': '\033[31m',    # –ö—Ä–∞—Å–Ω—ã–π
        'CRITICAL': '\033[35m', # –ü—É—Ä–ø—É—Ä–Ω—ã–π
        'RESET': '\033[0m'      # –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞
    }

    def format(self, record):
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫ —É—Ä–æ–≤–Ω—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_color = self.COLORS.get(record.levelname, self.COLORS['RESET'])
        reset_color = self.COLORS['RESET']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        record.levelname = f"{log_color}{record.levelname}{reset_color}"
        return super().format(record)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Å–æ–ª–∏
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.DEBUG)
formatter = ColoredFormatter(
    '%(asctime)s | %(levelname)s | %(name)s | %(message)s',
    datefmt='%H:%M:%S'
)
console_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
if not logger.handlers:
    logger.addHandler(console_handler)

# –û—Ç–∫–ª—é—á–∞–µ–º –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç root logger —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
logger.propagate = False

class DevinoSMSService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SMS —á–µ—Ä–µ–∑ Devino 2FA API"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        self.api_key = settings.DEVINO_API_KEY
        self.api_url = settings.DEVINO_API_URL or "https://phoneverification.devinotele.com"
        self.debug_mode = not self.api_key or self.api_key == "your_api_key_here"
        
        logger.info("============================================================")
        logger.info("üîß DEVINO SMS SERVICE INITIALIZATION")
        logger.info("============================================================")
        
        if self.debug_mode:
            logger.warning("‚ö†Ô∏è  DEBUG MODE: API Key not configured properly")
            logger.info(f"üìç Using base URL: {self.api_url}")
        else:
            logger.info("‚úÖ Production mode active")
            logger.info(f"üîë API Key configured: {self.api_key[:8]}...{self.api_key[-4:]}")
            logger.info(f"üìç Using base URL: {self.api_url}")
        
        logger.info("============================================================")

    def _normalize_phone(self, phone: str) -> str:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞
        
        Args:
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            
        Returns:
            str: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –±–µ–∑ –∑–Ω–∞–∫–∞ +
        """
        logger.debug(f"üì± Normalizing phone: '{phone}'")
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        clean_phone = ''.join(filter(str.isdigit, phone))
        
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7 (–¥–ª—è –†–æ—Å—Å–∏–∏)
        if clean_phone.startswith('8') and len(clean_phone) == 11:
            clean_phone = '7' + clean_phone[1:]
        
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 00, —É–±–∏—Ä–∞–µ–º
        if clean_phone.startswith('00'):
            clean_phone = clean_phone[2:]
        
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞
        if len(clean_phone) == 9 and clean_phone.startswith('2'):
            clean_phone = '996' + clean_phone
        elif len(clean_phone) == 9 and clean_phone.startswith(('5', '7', '9')):
            clean_phone = '996' + clean_phone
        
        logger.info(f"üì± Phone normalized: '{phone}' ‚Üí '{clean_phone}'")
        return clean_phone

    def _generate_code(self, length: int = 4) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ SMS –∫–æ–¥–∞"""
        return ''.join(random.choices(string.digits, k=length))

    async def send_sms_code(self, phone: str, code: Optional[str] = None) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Devino 2FA API
        
        Args:
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            code: SMS –∫–æ–¥ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        logger.info("============================================================")
        logger.info("üöÄ SENDING SMS CODE via DEVINO 2FA API")
        logger.info("============================================================")
        
        try:
            # –®–∞–≥ 1: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
            logger.info("üìç Step 1: Phone normalization")
            normalized_phone = self._normalize_phone(phone)
            
            # –®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ payload
            logger.info("üìç Step 2: Building request payload")
            payload = {
                "DestinationNumber": normalized_phone
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if code:
                payload["SMSCode"] = code
                logger.debug(f"üì¶ Custom SMS code provided: {code}")
            else:
                logger.debug("üì¶ SMS code will be auto-generated by Devino")
            
            logger.debug(f"üì¶ Request payload: {payload}")
            
            # DEBUG —Ä–µ–∂–∏–º
            if self.debug_mode:
                logger.warning("üîß DEBUG MODE: Simulating SMS send")
                generated_code = code or self._generate_code()
                logger.info(f"üì± Phone: {normalized_phone}")
                logger.info(f"üìù Generated code: {generated_code}")
                return {
                    'success': True,
                    'message': 'SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (DEBUG —Ä–µ–∂–∏–º)',
                    'code': generated_code,
                    'phone': normalized_phone,
                    'debug': True
                }
            
            # –®–∞–≥ 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞
            logger.info("üìç Step 3: Preparing HTTP request")
            logger.debug("üîß Building request headers")
            
            headers = {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "User-Agent": "Wazir-FastAPI/1.0",
                "X-ApiKey": self.api_key
            }
            
            logger.debug("‚úÖ X-ApiKey header added")
            logger.debug(f"üìã Headers ready: {list(headers.keys())}")
            
            url = f"{self.api_url}/GenerateCode"
            logger.info(f"üåê Target URL: {url}")
            
            # –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            logger.info("üìç Step 4: Sending HTTP request")
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                logger.debug("üîå HTTP client created with 30s timeout")
                
                response = await client.post(
                    url,
                    json=payload,
                    headers=headers
                )
                
                logger.info(f"‚è±Ô∏è  Request completed in {response.elapsed.total_seconds():.2f}s")
                
                # –®–∞–≥ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
                logger.info("üìç Step 5: Processing response")
                logger.info(f"üì® HTTP Status: {response.status_code}")
                logger.debug(f"üì® Response headers: {dict(response.headers)}")
                
                try:
                    response_data = response.json()
                    logger.debug(f"üì® Raw response: {response_data}")
                except Exception as e:
                    logger.error(f"‚ùå Failed to parse JSON response: {e}")
                    logger.debug(f"üì® Raw response text: {response.text}")
                    response_data = {"error": "Invalid JSON response"}
                
                if response.status_code == 200:
                    # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                    logger.info("‚úÖ SMS code sent successfully")
                    return {
                        'success': True,
                        'message': 'SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
                        'phone': normalized_phone,
                        'response': response_data
                    }
                else:
                    # –û—à–∏–±–∫–∞ HTTP
                    logger.error(f"‚ùå HTTP error {response.status_code}")
                    logger.error(f"‚ùå Response: {response_data}")
                    return {
                        'success': False,
                        'error': f'HTTP error: {response_data}'
                    }
                    
        except httpx.TimeoutException:
            logger.error("‚è∞ Request timeout (30s)")
            return {
                'success': False,
                'error': '–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Devino API'
            }
        except Exception as e:
            logger.error(f"üí• Unexpected error: {str(e)}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: {str(e)}'
            }
        finally:
            logger.info("============================================================")

    async def verify_sms_code(self, phone: str, code: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ SMS –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Devino 2FA API
        
        Args:
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            code: –ö–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        logger.info("============================================================")
        logger.info("üîç VERIFYING SMS CODE via DEVINO 2FA API")
        logger.info("============================================================")
        
        try:
            # –®–∞–≥ 1: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
            logger.info("üìç Step 1: Phone normalization")
            normalized_phone = self._normalize_phone(phone)
            
            # –®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ payload
            logger.info("üìç Step 2: Building request payload")
            payload = {
                "DestinationNumber": normalized_phone,
                "Code": code
            }
            
            logger.debug(f"üì¶ Request payload: {payload}")
            
            # DEBUG —Ä–µ–∂–∏–º
            if self.debug_mode:
                logger.warning("üîß DEBUG MODE: Simulating code verification")
                # –í DEBUG —Ä–µ–∂–∏–º–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–¥—ã 1234, 0000, –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞
                valid_codes = ['1234', '0000', normalized_phone[-4:]]
                is_valid = code in valid_codes
                
                logger.info(f"üì± Phone: {normalized_phone}")
                logger.info(f"üìù Code to verify: {code}")
                logger.info(f"‚úÖ Valid codes: {valid_codes}")
                logger.info(f"üéØ Verification result: {'VALID' if is_valid else 'INVALID'}")
                
                return {
                    'success': True,
                    'valid': is_valid,
                    'message': '–ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–µ–Ω (DEBUG —Ä–µ–∂–∏–º)',
                    'phone': normalized_phone,
                    'debug': True
                }
            
            # –®–∞–≥ 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞
            logger.info("üìç Step 3: Preparing HTTP request")
            
            headers = {
                "Content-Type": "application/json",
                "Accept": "application/json", 
                "User-Agent": "Wazir-FastAPI/1.0",
                "X-ApiKey": self.api_key
            }
            
            url = f"{self.api_url}/CheckCode"
            logger.info(f"üåê Target URL: {url}")
            
            # –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            logger.info("üìç Step 4: Sending HTTP request")
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                logger.debug("üîå HTTP client created with 30s timeout")
                
                response = await client.post(
                    url,
                    json=payload,
                    headers=headers
                )
                
                logger.info(f"‚è±Ô∏è  Request completed in {response.elapsed.total_seconds():.2f}s")
                
                # –®–∞–≥ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
                logger.info("üìç Step 5: Processing response")
                logger.info(f"üì® HTTP Status: {response.status_code}")
                
                try:
                    response_data = response.json()
                    logger.debug(f"üì® Raw response: {response_data}")
                except Exception as e:
                    logger.error(f"‚ùå Failed to parse JSON response: {e}")
                    response_data = {"error": "Invalid JSON response"}
                
                if response.status_code == 200:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Devino
                    result_code = response_data.get('Code', -1)
                    if result_code == 0:
                        logger.info("‚úÖ SMS code verified successfully")
                        return {
                            'success': True,
                            'valid': True,
                            'message': '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ',
                            'phone': normalized_phone,
                            'response': response_data
                        }
                    else:
                        logger.warning(f"‚ö†Ô∏è  Code verification failed: {response_data}")
                        return {
                            'success': True,
                            'valid': False,
                            'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
                            'phone': normalized_phone,
                            'response': response_data
                        }
                else:
                    # –û—à–∏–±–∫–∞ HTTP
                    logger.error(f"‚ùå HTTP error {response.status_code}")
                    logger.error(f"‚ùå Response: {response_data}")
                    return {
                        'success': False,
                        'error': f'HTTP error: {response_data}'
                    }
                    
        except httpx.TimeoutException:
            logger.error("‚è∞ Request timeout (30s)")
            return {
                'success': False,
                'error': '–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Devino API'
            }
        except Exception as e:
            logger.error(f"üí• Unexpected error: {str(e)}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SMS: {str(e)}'
            }
        finally:
            logger.info("============================================================")

    async def get_balance(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ API)
        
        Returns:
            Dict[str, Any]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ
        """
        logger.info("============================================================")
        logger.info("üí∞ CHECKING BALANCE via DEVINO API")
        logger.info("============================================================")
        
        if self.debug_mode:
            logger.warning("üîß DEBUG MODE: Simulating balance check")
            return {
                'success': True,
                'balance': 1000.00,
                'currency': 'RUB',
                'debug': True
            }
        
        # –í –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –≤–∏–∂—É —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        logger.warning("‚ö†Ô∏è  Balance endpoint not available in Devino 2FA API")
        return {
            'success': False,
            'error': 'Balance check not supported by Devino 2FA API'
        }


devino_sms_service = DevinoSMSService()