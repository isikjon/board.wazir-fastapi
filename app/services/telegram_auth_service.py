"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–æ–≤
"""

import asyncio
import json
import logging
import random
import uuid
from datetime import datetime, timedelta
from typing import Dict, Optional, Union, Any, List
from dataclasses import dataclass

import httpx
from config import settings

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class TelegramAuthResponse:
    success: bool
    message: str
    data: Optional[Dict[str, Any]] = None
    error_code: Optional[str] = None

# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–π
class TelegramAuthResult:
    def __init__(self, success: bool, session_id: str = None, code: str = None, message: str = None):
        self.success = success
        self.session_id = session_id
        self.code = code
        self.message = message

class TelegramAuthService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram"""
    
    def __init__(self):
        self.bot_token = getattr(settings, 'TELEGRAM_BOT_TOKEN', None)
        self.bot_username = getattr(settings, 'TELEGRAM_BOT_USERNAME', None)
        self.codes_storage = {}
        self.phone_tg_mapping = {}
        self.code_expiry = 300
        
        # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
        self.sessions: Dict[str, Dict[str, Any]] = {}
        # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
        self.session_lifetime = 15
        
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramAuthService")
        
    def generate_code(self) -> str:
        return str(random.randint(1000, 9999))
    
    async def create_session(self, phone: str) -> TelegramAuthResult:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç session_id
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π session_id
        session_id = str(uuid.uuid4())
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω (—É–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä)
        normalized_phone = ''.join(filter(str.isdigit, phone))
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        self.sessions[session_id] = {
            'phone': normalized_phone,
            'created_at': datetime.now(),
            'expires_at': datetime.now() + timedelta(minutes=self.session_lifetime),
            'confirmed': False,
            'telegram_user_id': None,
            'code': None
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Telegram –±–æ—Ç–∞
        telegram_url = f"https://t.me/{self.bot_username}?start={session_id}"
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {session_id} –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {normalized_phone}")
        logger.info(f"üîó Telegram URL: {telegram_url}")
        
        return TelegramAuthResult(
            success=True,
            session_id=session_id,
            message="–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        )
    
    async def verify_phone_from_telegram(self, telegram_user_id: int, phone: str, session_id: str) -> TelegramAuthResult:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç Telegram –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –µ–≥–æ –∫ —Å–µ—Å—Å–∏–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        if session_id not in self.sessions:
            logger.warning(f"‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {session_id}")
            return TelegramAuthResult(
                success=False,
                message="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞"
            )
        
        session = self.sessions[session_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏
        if datetime.now() > session['expires_at']:
            logger.warning(f"‚åõ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞: {session_id}")
            del self.sessions[session_id]
            return TelegramAuthResult(
                success=False,
                message="–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞"
            )
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
        session_phone = ''.join(filter(str.isdigit, session['phone']))
        telegram_phone = ''.join(filter(str.isdigit, phone))
        
        logger.info(f"üì± –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:")
        logger.info(f"   - –°–µ—Å—Å–∏—è:   {session_phone}")
        logger.info(f"   - Telegram: {telegram_phone}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        if session_phone != telegram_phone:
            logger.warning(f"‚ùå –¢–µ–ª–µ—Ñ–æ–Ω—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {session_phone} != {telegram_phone}")
            return TelegramAuthResult(
                success=False,
                message="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
            )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        code = ''.join(random.choices('0123456789', k=4))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        session['confirmed'] = True
        session['telegram_user_id'] = telegram_user_id
        session['code'] = code
        
        logger.info(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
        logger.info(f"üî¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥: {code}")
        
        return TelegramAuthResult(
            success=True,
            code=code,
            message="–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
        )
    
    async def verify_code(self, phone: str, code: str) -> TelegramAuthResult:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        normalized_phone = ''.join(filter(str.isdigit, phone))
        
        # –ò—â–µ–º —Å–µ—Å—Å–∏—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        session_id = None
        for sid, session in self.sessions.items():
            session_phone = ''.join(filter(str.isdigit, session['phone']))
            if session_phone == normalized_phone and session['confirmed']:
                session_id = sid
                break
        
        if not session_id:
            logger.warning(f"‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {normalized_phone}")
            return TelegramAuthResult(
                success=False,
                message="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            )
        
        session = self.sessions[session_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏
        if datetime.now() > session['expires_at']:
            logger.warning(f"‚åõ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞: {session_id}")
            del self.sessions[session_id]
            return TelegramAuthResult(
                success=False,
                message="–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        if session['code'] != code:
            logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥: {code} != {session['code']}")
            return TelegramAuthResult(
                success=False,
                message="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"
            )
        
        logger.info(f"‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
        
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        del self.sessions[session_id]
        
        return TelegramAuthResult(
            success=True,
            message="–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        )
    
    def get_session_status(self, session_id: str) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
        """
        if session_id not in self.sessions:
            return {
                "found": False,
                "message": "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }
        
        session = self.sessions[session_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏
        if datetime.now() > session['expires_at']:
            del self.sessions[session_id]
            return {
                "found": False,
                "message": "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞"
            }
        
        return {
            "found": True,
            "confirmed": session['confirmed'],
            "expires_in": int((session['expires_at'] - datetime.now()).total_seconds()),
            "phone": session['phone'][-4:].rjust(len(session['phone']), '*')  # –ú–∞—Å–∫–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
        }
    
    def cleanup_expired_sessions(self) -> int:
        """
        –£–¥–∞–ª—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        """
        expired_count = 0
        current_time = datetime.now()
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        to_delete = []
        for session_id, session in self.sessions.items():
            if current_time > session['expires_at']:
                to_delete.append(session_id)
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
        for session_id in to_delete:
            del self.sessions[session_id]
            expired_count += 1
        
        if expired_count > 0:
            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {expired_count} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π")
        
        return expired_count
    
    async def _send_code_to_telegram(self, telegram_id: int, code: str):
        if not self.bot_token:
            logger.warning("Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
            
        try:
            async with httpx.AsyncClient() as client:
                await client.post(
                    f"https://api.telegram.org/bot{self.bot_token}/sendMessage",
                    json={
                        'chat_id': telegram_id,
                        'text': f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}",
                        'parse_mode': 'HTML'
                    }
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
    
    def _normalize_phone(self, phone: str) -> str:
        phone = phone.strip().replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
        if phone.startswith('+'):
            phone = phone[1:]
        elif phone.startswith('8') and len(phone) == 11:
            phone = '7' + phone[1:]
        return phone
    
    def cleanup_expired_codes(self):
        now = datetime.now()
        expired_phones = []
        
        for phone, data in self.codes_storage.items():
            if now - data['created_at'] > timedelta(seconds=self.code_expiry):
                expired_phones.append(phone)
        
        for phone in expired_phones:
            del self.codes_storage[phone]
            
        expired_sessions = []
        for phone, data in self.phone_tg_mapping.items():
            if now - data['created_at'] > timedelta(minutes=5):
                expired_sessions.append(phone)
                
        for phone in expired_sessions:
            del self.phone_tg_mapping[phone]

    async def initiate_auth(self, phone: str) -> TelegramAuthResponse:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
        –°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ Telegram
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            result = await self.create_session(phone)
            
            if result.success:
                # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è Telegram
                if not self.bot_username:
                    logger.error("TELEGRAM_BOT_USERNAME –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                    return TelegramAuthResponse(
                        success=False,
                        message="Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                        error_code="BOT_NOT_CONFIGURED"
                    )
                
                telegram_url = f"https://t.me/{self.bot_username}?start={result.session_id}"
                
                return TelegramAuthResponse(
                    success=True,
                    message=result.message,
                    data={
                        "session_id": result.session_id,
                        "telegram_url": telegram_url
                    }
                )
            else:
                return TelegramAuthResponse(
                    success=False,
                    message=result.message,
                    error_code="SESSION_CREATION_FAILED"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return TelegramAuthResponse(
                success=False,
                message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏",
                error_code="INTERNAL_ERROR"
            )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
telegram_auth_service = TelegramAuthService() 