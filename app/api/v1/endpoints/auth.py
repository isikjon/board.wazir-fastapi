from fastapi import APIRouter, Depends, HTTPException, status, Form, Request
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session
from sqlalchemy import or_
from app.api import deps
from app import models
from app.utils.security import get_password_hash, verify_password
from app.utils.auth import create_access_token
from app.services.devino_sms_service import devino_sms_service
from datetime import timedelta
from typing import Optional
from pydantic import EmailStr
from config import settings
import re
import random
import string

router = APIRouter()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ª—é–±–∞—è —Å—Ç—Ä–∞–Ω–∞)
def is_valid_phone(phone: str) -> bool:
    # –í—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    print(f"DEBUG is_valid_phone: –ø–æ–ª—É—á–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: '{phone}'")
    print(f"DEBUG is_valid_phone: –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True")
    return True

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
def user_exists(db: Session, contact: str, contact_type: str) -> bool:
    if contact_type == "email":
        user = db.query(models.User).filter(models.User.email == contact).first()
    else:  # —Ç–µ–ª–µ—Ñ–æ–Ω
        # –û—á–∏—â–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        phone_clean = re.sub(r'\D', '', contact)
        user = db.query(models.User).filter(models.User.phone.ilike(f"%{phone_clean}%")).first()
    
    return user is not None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É
def get_user_by_contact(db: Session, contact: str, contact_type: str):
    if contact_type == "email":
        return db.query(models.User).filter(models.User.email == contact).first()
    else:  # —Ç–µ–ª–µ—Ñ–æ–Ω
        # –û—á–∏—â–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        phone_clean = re.sub(r'\D', '', contact)
        return db.query(models.User).filter(models.User.phone.ilike(f"%{phone_clean}%")).first()

@router.post("/login")
async def login(
    contact: str = Form(...),
    password: str = Form(...),
    contact_type: str = Form(...),
    db: Session = Depends(deps.get_db)
):
    """
    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ email
    """
    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if contact_type == "email":
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
        if not re.match(r"[^@]+@[^@]+\.[^@]+", contact):
            return {"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email"}
    else:  # —Ç–µ–ª–µ—Ñ–æ–Ω
        if not is_valid_phone(contact):
            return {"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞"}
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_user_by_contact(db, contact, contact_type)
    
    if not user:
        return {"success": False, "error": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º {contact_type} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    
    if not verify_password(password, user.hashed_password):
        return {"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"}
    
    if not user.is_active:
        return {"success": False, "error": "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"}
    
    # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": str(user.id)}, expires_delta=access_token_expires
    )
    
    return {
        "success": True,
        "access_token": access_token,
        "token_type": "bearer",
        "user_id": user.id,
        "full_name": user.full_name
    }

@router.post("/check-exists")
async def check_exists(
    contact: str = Form(...),
    contact_type: str = Form(...),
    db: Session = Depends(deps.get_db)
):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    """
    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if contact_type == "email":
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
        if not re.match(r"[^@]+@[^@]+\.[^@]+", contact):
            return {"exists": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email"}
    else:  # —Ç–µ–ª–µ—Ñ–æ–Ω
        # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª—é–±—ã–µ –Ω–æ–º–µ—Ä–∞
        pass
    
    exists = user_exists(db, contact, contact_type)
    
    return {"exists": exists}

@router.post("/send-code")
async def send_code(
    request: Request,
    contact: str = Form(...),
    contact_type: str = Form(...),
    db: Session = Depends(deps.get_db)
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    """
    print("\n" + "=" * 80)
    print("–°–¢–ê–†–´–ô –†–û–£–¢–ï–† - –û–¢–ü–†–ê–í–ö–ê –ö–û–î–ê –ß–ï–†–ï–ó TELEGRAM –ë–û–¢")
    print("=" * 80)
    print(f"–ö–æ–Ω—Ç–∞–∫—Ç: {contact}")
    print(f"–¢–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–∞: {contact_type}")
    
    # –ù–ï –ì–ï–ù–ï–†–ò–†–£–ï–ú –ö–û–î –ó–î–ï–°–¨! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –∫ –±–æ—Ç—É
    
    try:
        if contact.startswith('+'):
            phone = contact
        else:
            phone = '+' + contact
        
        print(f"–¢–ï–õ–ï–§–û–ù –ü–û–î–ì–û–¢–û–í–õ–ï–ù: {phone}")
        print("–ö–û–î –ë–£–î–ï–¢ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù –ë–û–¢–û–ú –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º'")
        
        response_data = {
            "success": True,
            "message": f"üì± –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Telegram –∫ –±–æ—Ç—É @{settings.TELEGRAM_BOT_USERNAME} –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º'.\n\nü§ñ –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
        }
        
        print(f"–û–¢–í–ï–¢: {response_data}")
        print("=" * 80)
        
        return JSONResponse(
            status_code=200,
            content=response_data
        )
        
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê: {str(e)}")
        print("=" * 80)
        
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥
        code = ''.join(random.choices('0123456789', k=4))
        return JSONResponse(
            status_code=200,
            content={
                "success": True,
                "message": f"‚ö†Ô∏è –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥: {code}\n\n–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
                "code": code
            }
        )

@router.post("/verify-code")
async def verify_code(
    code: str = Form(...),
    contact: str = Form(...),
    contact_type: str = Form(...),
    db: Session = Depends(deps.get_db)
):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    """
    print("\n" + "=" * 80)
    print("–°–¢–ê–†–´–ô –†–û–£–¢–ï–† - –ü–†–û–í–ï–†–ö–ê –ö–û–î–ê –ß–ï–†–ï–ó TELEGRAM –ë–û–¢")
    print("=" * 80)
    print(f"–ö–æ–Ω—Ç–∞–∫—Ç: {contact}")
    print(f"–¢–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–∞: {contact_type}")
    print(f"–ö–æ–¥: {code}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    try:
        from telegram_bot import sms_bot
        
        # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        if contact.startswith('+'):
            phone = contact
        else:
            phone = '+' + contact
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤ –±–æ—Ç–µ
        if sms_bot.verify_code(phone, code):
            print("–†–ï–ó–£–õ–¨–¢–ê–¢: –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —á–µ—Ä–µ–∑ Telegram –±–æ—Ç")
            print("=" * 80)
            return {"verified": True}
        else:
            print("–†–ï–ó–£–õ–¨–¢–ê–¢: –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π")
            print("=" * 80)
            return {"verified": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"}
            
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò: {str(e)}")
        print("=" * 80)
        
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        if len(code) == 4 and code.isdigit():
            print("–†–ï–ó–£–õ–¨–¢–ê–¢: –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)")
            return {"verified": True}
        else:
            return {"verified": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"}

@router.post("/register")
async def register(
    first_name: str = Form(...),
    last_name: str = Form(...),
    contact: str = Form(...),
    contact_type: str = Form(...),
    password: str = Form(...),
    db: Session = Depends(deps.get_db)
):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if not first_name or not last_name:
        return {"success": False, "error": "–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}
    
    if len(password) < 6:
        return {"success": False, "error": "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if user_exists(db, contact, contact_type):
        return {"success": False, "error": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º {contact_type} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = models.User(
        full_name=f"{first_name} {last_name}",
        hashed_password=get_password_hash(password),
        is_active=True,
        status=models.UserStatus.ACTIVE
    )
    
    if contact_type == "email":
        user.email = contact
    else:  # —Ç–µ–ª–µ—Ñ–æ–Ω
        user.phone = contact
    
    db.add(user)
    db.commit()
    db.refresh(user)
    
    # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": str(user.id)}, expires_delta=access_token_expires
    )
    
    return {
        "success": True,
        "access_token": access_token,
        "token_type": "bearer",
        "user_id": user.id,
        "full_name": user.full_name
    }

@router.post("/reset-password")
async def reset_password(
    contact: str = Form(...),
    contact_type: str = Form(...),
    password: str = Form(...),
    db: Session = Depends(deps.get_db)
):
    """
    –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ SMS –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if contact_type != "phone":
        return {"success": False, "error": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ SMS –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not is_valid_phone(contact):
        return {"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞"}
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_user_by_contact(db, contact, contact_type)
    
    if not user:
        return {"success": False, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    user.hashed_password = get_password_hash(password)
    db.commit()
    
    return {"success": True, "message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"} 