import uuid
import logging
from datetime import datetime
from typing import Optional, Dict, Any, Union
from pathlib import Path
from PIL import Image
from fastapi import UploadFile, HTTPException
import io

from .media_uploader import media_uploader

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

class PanoramaProcessor:
    
    MAX_FILE_SIZE = 100 * 1024 * 1024
    SUPPORTED_FORMATS = {'.jpg', '.jpeg', '.png', '.tiff', '.bmp'}
    
    def __init__(self):
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PanoramaProcessor")
        logger.info("‚úÖ PanoramaProcessor –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞ —Å–µ—Ä–≤–µ—Ä–æ–º")
    
    def validate_file(self, file_input: Union[bytes, Path, str], file_size: int) -> bool:
        logger.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ø–∞–Ω–æ—Ä–∞–º—ã")
        
        if file_size > self.MAX_FILE_SIZE:
            logger.error(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –±–∞–π—Ç")
            return False
        
        try:
            if isinstance(file_input, (Path, str)):
                with open(file_input, 'rb') as f:
                    file_data = f.read()
                image = Image.open(io.BytesIO(file_data))
            else:
                image = Image.open(io.BytesIO(file_input))
            
            width, height = image.size
            logger.info(f"üìê –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {width}x{height}")
            
            if width < 2048 or height < 1024:
                logger.error(f"‚ùå –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –ø–∞–Ω–æ—Ä–∞–º—ã: {width}x{height}")
                return False
            
            aspect_ratio = width / height
            if not (1.8 <= aspect_ratio <= 2.2):
                logger.warning(f"‚ö†Ô∏è –ù–µ–æ–±—ã—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {aspect_ratio:.2f}")
            
            logger.info("‚úÖ –§–∞–π–ª –ø–∞–Ω–æ—Ä–∞–º—ã –≤–∞–ª–∏–¥–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            return False
    
    async def upload_panorama(self, file: UploadFile, service_card_id: int) -> Dict[str, Any]:
        try:
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–∞–Ω–æ—Ä–∞–º—ã –¥–ª—è service_card_id: {service_card_id}")
            
            file_content = await file.read()
            file_size = len(file_content)
            
            if not self.validate_file(file_content, file_size):
                raise HTTPException(status_code=400, detail="–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
            
            property_id = f"service_card_{service_card_id}"
            
            file_data = {
                'content': file_content,
                'filename': file.filename
            }
            
            result = await media_uploader.upload_panorama(file_data, property_id)
            
            if result.get("status") == "success":
                logger.info("‚úÖ –ü–∞–Ω–æ—Ä–∞–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return {
                    "success": True,
                    "file_id": result.get("file_id"),
                    "urls": {
                        "original": result.get("original_url"),
                        "optimized": result.get("optimized_url"),
                        "preview": result.get("preview_url"),
                        "thumbnail": result.get("thumbnail_url")
                    },
                    "metadata": result.get("metadata", {})
                }
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result.get('message')}")
                raise HTTPException(status_code=500, detail=result.get("message", "Upload failed"))
                
        except HTTPException:
            raise
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ 360¬∞ –ø–∞–Ω–æ—Ä–∞–º—ã: {str(e)}")
        finally:
            await file.seek(0)

panorama_processor = PanoramaProcessor() 