import os
import uuid
import json
import sys
import asyncio
import subprocess
import openpyxl
import pandas as pd
import random
import shutil
import httpx
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List
from io import BytesIO
from uuid import uuid4
from pathlib import Path
import time
from contextlib import asynccontextmanager

from fastapi import FastAPI, Request, Depends, Form, status, HTTPException, Query, WebSocket, WebSocketDisconnect, Response, UploadFile, File, APIRouter
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, RedirectResponse, FileResponse, JSONResponse, StreamingResponse
from fastapi.staticfiles import StaticFiles
from starlette.middleware.sessions import SessionMiddleware
from starlette.middleware.base import BaseHTTPMiddleware

from sqlalchemy.orm import Session, joinedload
from sqlalchemy import func, desc, or_, and_, asc, text
from sqlalchemy.types import String

from passlib.context import CryptContext
from jose import JWTError, jwt
from jose import jwt as pyjwt

from config import settings
from api.v1.api import api_router
from app.api import deps
from app.utils.security import verify_password
from app import models
from app.models.user import User
from app.models.token import TokenPayload
from app.models.chat import AppChatModel, AppChatMessageModel
from app.models.chat_message import ChatMessage
from app.models.property import PropertyImage
from app.websockets.chat_manager import ConnectionManager as WebSocketManager
from app.utils.image_helper import get_valid_image_url
from app.models.property import PropertyCategory
from app.models.service import ServiceCategory, ServiceCard, ServiceCardImage

try:
    from app.services.telegram_bot_service import telegram_bot_service
    telegram_bot_available = True
except ImportError as e:
    print(f"Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    telegram_bot_service = None
    telegram_bot_available = False

try:
    import psutil
except ImportError:
    psutil = None

try:
    from flask import jsonify
except ImportError:
    pass

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç —Å nest_asyncio
try:
    from telegram_bot import sms_bot
    simple_bot_available = True
except ImportError:
    simple_bot_available = False
    sms_bot = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_categories_from_json():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open('categories.json', 'r', encoding='utf-8') as f:
            categories = json.load(f)
        
        print(f"=== –ó–ê–ì–†–£–ó–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ô ===")
        print(f"–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(categories)}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º
        level_1 = [c for c in categories if c.get('level', 1) == 1]
        level_2 = [c for c in categories if c.get('level', 1) == 2]
        level_3 = [c for c in categories if c.get('level', 1) == 3]
        
        print(f"–£—Ä–æ–≤–µ–Ω—å 1: {len(level_1)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        print(f"–£—Ä–æ–≤–µ–Ω—å 2: {len(level_2)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")  
        print(f"–£—Ä–æ–≤–µ–Ω—å 3: {len(level_3)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–î–ª—è –¥–æ–º–∞ –∏ –¥–∞—á–∏"
        home_garden = [c for c in categories if c.get('name') == '–î–ª—è –¥–æ–º–∞ –∏ –¥–∞—á–∏']
        if home_garden:
            cat = home_garden[0]
            print(f"=== –ö–ê–¢–ï–ì–û–†–ò–Ø '–î–õ–Ø –î–û–ú–ê –ò –î–ê–ß–ò' ===")
            print(f"ID: {cat.get('id')}")
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {cat.get('name')}")
            print(f"–£—Ä–æ–≤–µ–Ω—å: {cat.get('level')}")
            print(f"–ï—Å—Ç—å –¥–µ—Ç–∏: {cat.get('has_children')}")
            print(f"–¢–∏–ø has_children: {type(cat.get('has_children'))}")
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 6
        subcategories = [c for c in categories if c.get('parent_id') == 6]
        print(f"=== –ü–û–î–ö–ê–¢–ï–ì–û–†–ò–ò –î–õ–Ø –ö–ê–¢–ï–ì–û–†–ò–ò 6 ===")
        print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(subcategories)}")
        for sub in subcategories:
            print(f"  - ID: {sub.get('id')}, –ù–∞–∑–≤–∞–Ω–∏–µ: {sub.get('name')}, Parent ID: {sub.get('parent_id')}")
        
        # –í—ã–≤–æ–¥–∏–º –±—Ä–µ–Ω–¥—ã –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 61
        brands = [c for c in categories if c.get('parent_id') == 61]
        print(f"=== –ë–†–ï–ù–î–´ –î–õ–Ø –ü–û–î–ö–ê–¢–ï–ì–û–†–ò–ò 61 ===")
        print(f"–ù–∞–π–¥–µ–Ω–æ –±—Ä–µ–Ω–¥–æ–≤: {len(brands)}")
        for brand in brands:
            print(f"  - ID: {brand.get('id')}, –ù–∞–∑–≤–∞–Ω–∏–µ: {brand.get('name')}, Parent ID: {brand.get('parent_id')}")
        
        print(f"=== –ó–ê–ì–†–£–ó–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ô –ó–ê–í–ï–†–®–ï–ù–ê ===")
        return categories
        
    except FileNotFoundError:
        print("DEBUG: –§–∞–π–ª categories.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return [
            {"id": 1, "name": "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "slug": "real-estate", "image": "https://wazir.kg/board/categories/1.png", "parent_id": None, "level": 1, "has_children": False},
            {"id": 2, "name": "–ê–≤—Ç–æ", "slug": "auto", "image": "https://wazir.kg/board/categories/2.png", "parent_id": None, "level": 1, "has_children": False},
            {"id": 3, "name": "–†–∞–±–æ—Ç–∞", "slug": "jobs", "image": "https://wazir.kg/board/categories/3.png", "parent_id": None, "level": 1, "has_children": False},
            {"id": 4, "name": "–£—Å–ª—É–≥–∏", "slug": "services", "image": "https://wazir.kg/board/categories/4.png", "parent_id": None, "level": 1, "has_children": False},
            {"id": 5, "name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", "slug": "appliances", "image": "https://wazir.kg/board/categories/5.png", "parent_id": None, "level": 1, "has_children": False},
        ]
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ categories.json: {e}")
        return []

def get_categories_by_parent(parent_id=None):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ parent_id"""
    all_categories = load_categories_from_json()
    return [cat for cat in all_categories if cat.get('parent_id') == parent_id]

def get_category_by_id(category_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID"""
    all_categories = load_categories_from_json()
    for cat in all_categories:
        if cat.get('id') == category_id:
            return cat
    return None

@asynccontextmanager
async def lifespan(app: FastAPI):
    # –û–¢–ö–õ–Æ–ß–ê–ï–ú —Å–ª–æ–∂–Ω—ã–π –±–æ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π —Å–µ—Å—Å–∏–π
    # if telegram_bot_available and telegram_bot_service:
    #     print("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    #     await telegram_bot_service.start_bot()
    # else:
    #     print("Telegram –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
    
    # üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö –ü–†–û–°–¢–û–ì–û –ë–û–¢–ê üî•
    print("üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ Telegram –±–æ—Ç–∞...")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not settings.TELEGRAM_BOT_TOKEN:
            print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        elif not settings.TELEGRAM_BOT_USERNAME:
            print("‚ùå TELEGRAM_BOT_USERNAME –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        else:
            print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–π–¥–µ–Ω—ã: @{settings.TELEGRAM_BOT_USERNAME}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
            try:
                from telegram_bot import sms_bot
                print("‚úÖ telegram_bot –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ –ë–ï–ó –û–ñ–ò–î–ê–ù–ò–Ø
                asyncio.create_task(sms_bot.start_bot())
                print("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞")
                
                # –î–∞–µ–º –±–æ—Ç—É –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
                await asyncio.sleep(1)
                
            except ImportError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ telegram_bot: {e}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
                import traceback
                print(f"‚ùå Traceback: {traceback.format_exc()}")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    
    print("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    yield
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ Telegram –±–æ—Ç–∞...")
    try:
        from telegram_bot import sms_bot
        await sms_bot.stop_bot()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ –±–æ—Ç–∞: {e}")
    
    print("üõë –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

def create_access_token(data: dict) -> str:
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = pyjwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)
    return encoded_jwt

# –ö–ª–∞—Å—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–æ –Ω–µ WebSocket)
class AuthenticationMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å WebSocket
        if request.scope.get("type") == "websocket":
            # –î–ª—è WebSocket –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            return await call_next(request)
        
        # –ü—É—Ç–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        public_paths = [
            '/mobile/auth',
            '/mobile/register',
            '/mobile/register/verify',
            '/mobile/register/profile',
            '/mobile/reset',
            '/mobile/reset/verify',
            '/mobile/reset/password',
            '/api/v1/auth/login',
            '/api/v1/auth/check-exists',
            '/api/v1/auth/send-code',
            '/api/v1/auth/verify-code',
            '/api/v1/auth/register',
            '/api/v1/auth/reset-password',
            '/api/v1/telegram/initiate',
            '/api/v1/telegram/verify-phone',
            '/api/v1/telegram/verify-code',
            '/api/v1/telegram/status',
            '/api/v1/telegram/force-reset',
            '/favicon.ico',
            '/mobile/test-websocket',
            '/mobile/ws/',
            '/api/v1/chat/',  # Chat API general path
            '/admin/login',   # Admin login page
            '/superadmin/login',  # SuperAdmin login page
            '/companies/login',   # Company login page
        ]
        
        # –î–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
        if request.url.path.startswith('/static/'):
            return await call_next(request)
            
        # –î–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ - –ù–ï –ü–†–û–í–ï–†–Ø–ï–ú –¢–û–ö–ï–ù –í MIDDLEWARE
        # –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π API —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å–∞–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ deps.get_current_active_user
        if request.url.path.startswith('/api/'):
            # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
            if any(request.url.path.endswith(path) for path in [
                '/login',
                '/register',
                '/check-exists',
                '/send-code',
                '/verify-code',
                '/reset-password'
            ]):
                return await call_next(request)
                
            # –î–õ–Ø –í–°–ï–• –û–°–¢–ê–õ–¨–ù–´–• API –≠–ù–î–ü–û–ò–ù–¢–û–í - –ü–†–û–°–¢–û –ü–†–û–ü–£–°–ö–ê–ï–ú
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ deps.get_current_active_user
            return await call_next(request)
            
        if any(request.url.path.startswith(path) for path in public_paths) or '/api/v1/chat/' in request.url.path:
            return await call_next(request)
            
        auth_token = request.cookies.get('access_token')
        auth_header = request.headers.get('Authorization')
        
        print(f"DEBUG: Checking auth for path: {request.url.path}")
        print(f"DEBUG: Cookie token: {auth_token}")
        print(f"DEBUG: Auth header: {auth_header}")
        
        if auth_header and auth_header.startswith('Bearer '):
            auth_token = auth_header.split(' ')[1]
            print(f"DEBUG: Using token from header: {auth_token}")
        
        if not auth_token:
            print("DEBUG: No token found")
            if request.url.path.startswith('/admin/'):
                return RedirectResponse('/admin/login', status_code=303)
            elif request.url.path.startswith('/superadmin/'):
                return RedirectResponse('/superadmin/login', status_code=303)
            elif request.url.path.startswith('/companies/'):
                return RedirectResponse('/companies/login', status_code=303)
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            return RedirectResponse('/mobile/auth', status_code=303)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        try:
            payload = pyjwt.decode(auth_token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
            print(f"DEBUG: Token payload: {payload}")
            if datetime.fromtimestamp(payload["exp"]) < datetime.utcnow():
                print("DEBUG: Token expired")
                if request.url.path.startswith('/admin/'):
                    return RedirectResponse('/admin/login', status_code=303)
                elif request.url.path.startswith('/superadmin/'):
                    return RedirectResponse('/superadmin/login', status_code=303)
                elif request.url.path.startswith('/companies/'):
                    return RedirectResponse('/companies/login', status_code=303)
                return RedirectResponse('/mobile/auth', status_code=303)
                
            # –î–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω-–º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            if request.url.path.startswith('/superadmin/') and not payload.get("is_superadmin"):
                print("DEBUG: Non-superadmin user trying to access superadmin area")
                return RedirectResponse('/superadmin/login', status_code=303)
                
            # –î–ª—è –∞–¥–º–∏–Ω-–º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            if request.url.path.startswith('/admin/') and not payload.get("is_admin"):
                print("DEBUG: Non-admin user trying to access admin area")
                return RedirectResponse('/admin/login', status_code=303)
                
            # –î–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–ø–∞–Ω–∏–µ–π
            if request.url.path.startswith('/companies/') and not payload.get("is_company"):
                print("DEBUG: Non-company user trying to access company area")
                return RedirectResponse('/companies/login', status_code=303)
                
        except Exception as e:
            print(f"DEBUG: Token validation error (cookie): {str(e)}")
            if request.url.path.startswith('/admin/'):
                return RedirectResponse('/admin/login', status_code=303)
            elif request.url.path.startswith('/superadmin/'):
                return RedirectResponse('/superadmin/login', status_code=303)
            elif request.url.path.startswith('/companies/'):
                return RedirectResponse('/companies/login', status_code=303)
            return RedirectResponse('/mobile/auth', status_code=303)
            
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–∞–ª—å—à–µ
        return await call_next(request)

# –ö–∞—Å—Ç–æ–º–Ω—ã–π JSON-—ç–Ω–∫–æ–¥–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ datetime –∏ –¥—Ä—É–≥–∏—Ö –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤
class CustomJSONEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, datetime):
            return obj.strftime("%Y-%m-%d %H:%M:%S")
        return super().default(obj)

app = FastAPI(
    title=settings.PROJECT_NAME,
    openapi_url=f"{settings.API_V1_STR}/openapi.json",
    lifespan=lifespan
)

app.mount("/static", StaticFiles(directory="static"), name="static")
app.mount("/media", StaticFiles(directory="media"), name="media")

app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.BACKEND_CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["Authorization", "Content-Type", "Set-Cookie"],
)

app.add_middleware(SessionMiddleware, secret_key="wazir_super_secret_key")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ JSON, –∏—Å–ø–æ–ª—å–∑—É—è CustomJSONEncoder
def json_serialize(obj):
    return json.dumps(obj, cls=CustomJSONEncoder)

@app.exception_handler(TypeError)
async def type_error_handler(request, exc):
    if "not JSON serializable" in str(exc):
        return JSONResponse(
            status_code=500,
            content={"detail": "Error serializing the response"},
        )
    raise exc

templates = Jinja2Templates(directory="templates")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è API —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(api_router, prefix=settings.API_V1_STR)

# –î–æ–±–∞–≤–ª—è–µ–º –º–∏–¥–ª–≤–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.add_middleware(AuthenticationMiddleware)

# WebSocket Manager class
class ConnectionManager:
    def __init__(self):
        self.active_connections: Dict[str, List[WebSocket]] = {}
        self.chat_messages: Dict[str, List[dict]] = {}
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            if os.path.exists("chat_messages.json"):
                with open("chat_messages.json", "r", encoding="utf-8") as f:
                    data = f.read()
                    if data.strip():  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                        self.chat_messages = json.loads(data)
                        print(f"DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–æ–≤. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã: {list(self.chat_messages.keys())}")
                        for room, messages in self.chat_messages.items():
                            print(f"DEBUG: –ö–æ–º–Ω–∞—Ç–∞ {room}: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                            # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            if messages:
                                print(f"DEBUG: –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {messages[0].get('content', '–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞')}")
                                print(f"DEBUG: –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {messages[-1].get('content', '–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞')}")
                    else:
                        print("DEBUG: –§–∞–π–ª —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø—É—Å—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                        with open("chat_messages.json", "w", encoding="utf-8") as f:
                            json.dump({}, f, ensure_ascii=False, indent=2)
            else:
                print("DEBUG: –§–∞–π–ª —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                with open("chat_messages.json", "w", encoding="utf-8") as f:
                    json.dump({}, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                with open("chat_messages.json", "w", encoding="utf-8") as f:
                    json.dump({}, f, ensure_ascii=False, indent=2)
            except Exception as e2:
                print(f"DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª: {e2}")

    async def connect(self, websocket: WebSocket, room: str, accept_connection: bool = True):
        if accept_connection:
            await websocket.accept()
        if room not in self.active_connections:
            self.active_connections[room] = []
        if websocket not in self.active_connections[room]:
            self.active_connections[room].append(websocket)
            print(f"DEBUG: –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–º–Ω–∞—Ç–µ {room}, –≤—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {len(self.active_connections[room])}")
        else:
            print(f"DEBUG: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∫–æ–º–Ω–∞—Ç–µ {room}")

    def disconnect(self, websocket: WebSocket, room: str):
        try:
            if room in self.active_connections:
                if websocket in self.active_connections[room]:
                    self.active_connections[room].remove(websocket)
                    print(f"DEBUG: –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç –∫–æ–º–Ω–∞—Ç—ã {room}, –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {len(self.active_connections[room])}")
                if not self.active_connections[room]:
                    del self.active_connections[room]
                    print(f"DEBUG: –ö–æ–º–Ω–∞—Ç–∞ {room} —É–¥–∞–ª–µ–Ω–∞, –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç –∫–æ–º–Ω–∞—Ç—ã {room}: {e}")

    async def send_personal_message(self, message: dict, websocket: WebSocket):
        await websocket.send_json(message)

    # –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª
    def save_messages_to_file(self):
        try:
            with open("chat_messages.json", "w", encoding="utf-8") as f:
                json.dump(self.chat_messages, f, ensure_ascii=False, indent=2)
            print(f"DEBUG: –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª. –í—Å–µ–≥–æ –∫–æ–º–Ω–∞—Ç: {len(self.chat_messages)}")
        except Exception as e:
            print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª: {e}")
    
    # –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
    def add_message_to_memory(self, chat_id: str, message: dict):
        if chat_id not in self.chat_messages:
            self.chat_messages[chat_id] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
        self.chat_messages[chat_id].append(message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.save_messages_to_file()
    
    async def broadcast(self, message: dict, room: str, exclude=None):
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ø–∞–º—è—Ç–∏
        if message.get("type") in ["message", "message_sent", "new_message"] and "message" in message:
            chat_id = str(message["message"].get("chat_id", room))
            self.add_message_to_memory(chat_id, message["message"])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º –≤ –∫–æ–º–Ω–∞—Ç–µ
        if room in self.active_connections:
            for connection in self.active_connections[room]:
                if connection != exclude:
                    await connection.send_json(message)

    def save_message(self, room: str, message: dict):
        if room not in self.chat_messages:
            self.chat_messages[room] = []
        self.chat_messages[room].append(message)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            serializable_messages = {}
            for room_key, messages in self.chat_messages.items():
                serializable_messages[room_key] = []
                for msg in messages:
                    # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º timestamp, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if isinstance(msg, dict):
                        serializable_messages[room_key].append(msg)
                    else:
                        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–ª–æ–≤–∞—Ä—å, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É
                        serializable_messages[room_key].append(str(msg))
            
            with open("chat_messages.json", "w", encoding="utf-8") as f:
                json.dump(serializable_messages, f, ensure_ascii=False, indent=2)
                
            print(f"DEBUG: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É {room}, –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(self.chat_messages[room])}")
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    def get_messages(self, room: str) -> List[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã"""
        return self.chat_messages.get(room, [])
        
    async def save_message_to_db(self, message_data: dict, db: Session) -> dict:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
            saved_message = message_data.copy()
            
            # –î–æ–±–∞–≤–ª—è–µ–º timestamp –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            current_time = datetime.now()
            saved_message["timestamp"] = current_time.isoformat()
            saved_message["is_read"] = False
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π ID –≤–º–µ—Å—Ç–æ UUID –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ë–î
            saved_message["id"] = random.randint(100, 10000)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–∏–π ID –ø–µ—Ä–≤—ã–º)
            sender_id = int(saved_message["sender_id"])
            receiver_id = int(saved_message["receiver_id"])
            room = f"{min(sender_id, receiver_id)}_{max(sender_id, receiver_id)}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.save_message(room, saved_message)
            
            print(f"DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_message}")
            return saved_message
        except Exception as e:
            print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            basic_message = message_data.copy()
            basic_message["timestamp"] = datetime.now().isoformat()
            basic_message["is_read"] = False
            basic_message["id"] = str(uuid4())
            return basic_message

manager = ConnectionManager()

# ============================ WebSocket Endpoints ============================
from sqlalchemy.orm import Session
from app.api import deps
from app.websockets.chat_manager import manager as chat_manager
from jose import jwt as pyjwt

@app.websocket("/mobile/ws/chat/{token}")
async def chat_websocket_endpoint(websocket: WebSocket, token: str):
    try:
        payload = pyjwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        user_id = payload.get("sub")
        if not user_id:
            await websocket.close(code=1008)
            return
    except Exception as e:
        print(f"WebSocket auth error: {e}")
        await websocket.close(code=1008)
        return
        
    await chat_manager.connect(websocket, user_id)
    
    try:
        while True:
            data = await websocket.receive_json()
            message_type = data.get("type")
            
            if message_type == "message":
                db = next(deps.get_db())
                message_data = {
                    "sender_id": int(user_id),
                    "receiver_id": data["receiver_id"],
                    "content": data["content"]
                }
                
                saved_message = await chat_manager.save_message_to_db(message_data, db)
                
                await websocket.send_json({
                    "type": "message_sent",
                    "message": saved_message
                })
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                broadcast_message = {
                    "type": "new_message",
                    "message": saved_message,
                    "receiver_id": data["receiver_id"]
                }
                await chat_manager.broadcast(broadcast_message)
    except WebSocketDisconnect:
        chat_manager.disconnect(websocket, user_id)
    except Exception as e:
        print(f"WebSocket error: {e}")
        chat_manager.disconnect(websocket, user_id)

@app.websocket("/mobile/ws/test")
async def websocket_test_endpoint(websocket: WebSocket):
    print("WebSocket test connection request")
    await websocket.accept()
    print("WebSocket test connection accepted")
    
    try:
        while True:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            test_message = {
                "type": "test",
                "message": f"Test message at {datetime.now().strftime('%H:%M:%S')}",
                "timestamp": datetime.now().isoformat()
            }
            await websocket.send_text(json.dumps(test_message))
            await asyncio.sleep(5)
    except WebSocketDisconnect:
        print("WebSocket test connection disconnected")

@app.websocket("/superadmin/ws/logs")
async def logs_websocket_endpoint(websocket: WebSocket):
    import subprocess
    import asyncio
    from datetime import datetime
    
    await websocket.accept()
    print("SuperAdmin logs WebSocket connection established")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ Docker
        process = subprocess.Popen(
            ["docker", "logs", "-f", "--tail", "50", "state.wazir-fastapi-web-1"],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True,
            bufsize=1
        )
        
        while True:
            # –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –ª–æ–≥–æ–≤
            line = process.stdout.readline()
            if line:
                log_entry = {
                    "timestamp": datetime.now().isoformat(),
                    "message": line.strip(),
                    "level": "INFO"  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∞
                }
                await websocket.send_text(json.dumps(log_entry))
            else:
                await asyncio.sleep(0.1)
                
    except WebSocketDisconnect:
        print("SuperAdmin logs WebSocket connection disconnected")
        if 'process' in locals():
            process.terminate()
    except Exception as e:
        print(f"Error in logs WebSocket: {e}")
        if 'process' in locals():
            process.terminate()

# –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
@app.get("/", response_class=RedirectResponse)
async def root():
    return RedirectResponse(url="/mobile")

# –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ /layout
@app.get("/layout", response_class=RedirectResponse)
async def layout_root():
    return RedirectResponse(url="/mobile")

@app.get("/layout/dashboard", response_class=RedirectResponse)
async def layout_dashboard():
    return RedirectResponse(url="/mobile")

@app.get("/layout/auth", response_class=RedirectResponse)
async def layout_auth():
    return RedirectResponse(url="/mobile/auth")

@app.get("/layout/profile", response_class=RedirectResponse)
async def layout_profile():
    return RedirectResponse(url="/mobile/profile")

@app.get("/layout/create-listing", response_class=RedirectResponse)
async def layout_create_listing():
    return RedirectResponse(url="/mobile/create-listing")

@app.get("/layout/search", response_class=RedirectResponse)
async def layout_search():
    return RedirectResponse(url="/mobile/search")

@app.get("/layout/property/{property_id}", response_class=RedirectResponse)
async def layout_property_detail(property_id: int):
    return RedirectResponse(url=f"/mobile/property/{property_id}")

# –ù–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
@app.get("/register", response_class=RedirectResponse)
async def redirect_register():
    return RedirectResponse(url="/mobile/register")

@app.get("/reset", response_class=RedirectResponse)
async def redirect_reset():
    return RedirectResponse(url="/mobile/reset")

@app.get("/mobile/register", response_class=HTMLResponse, name="mobile_register")
async def mobile_register(request: Request):
    return templates.TemplateResponse("layout/register.html", {"request": request})

@app.get("/mobile/register/verify", response_class=HTMLResponse, name="mobile_register_verify")
async def mobile_register_verify(request: Request, db: Session = Depends(deps.get_db)):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ sessionStorage (–±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ)
    phone = request.query_params.get('phone')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
    import random
    code = ''.join(random.choices('0123456789', k=4))
    
    # –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–µ—Ä–µ–¥–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –ë–î
    if phone:
        try:
            # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
            if not phone.startswith('+'):
                phone = '+' + phone
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            existing_code = None
            try:
                from api.v1.endpoints.telegram_auth import load_verification_codes, save_verification_codes
                codes = load_verification_codes()
                
                if phone in codes:
                    stored_data = codes[phone]
                    time_diff = datetime.now() - stored_data['timestamp']
                    if time_diff <= timedelta(minutes=2):
                        existing_code = stored_data['code']
                        print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ {existing_code} –¥–ª—è {phone}")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
                if not existing_code:
                    codes[phone] = {
                        'code': code,
                        'timestamp': datetime.now(),
                        'user_id': None
                    }
                    save_verification_codes(codes)
                    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–æ–¥ {code} –¥–ª—è {phone}")
                else:
                    code = existing_code
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–∞–º–∏: {e}")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –ø–∞–º—è—Ç—å –∫–∞–∫ fallback
                if not hasattr(mobile_register_verify, '_codes'):
                    mobile_register_verify._codes = {}
                mobile_register_verify._codes[phone] = {
                    'code': code,
                    'timestamp': datetime.now()
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ
    return templates.TemplateResponse("layout/verify.html", {
        "request": request,
        "generated_code": code,
        "phone": phone
    })

@app.get("/mobile/register/profile", response_class=HTMLResponse, name="mobile_profile_create")
async def mobile_profile_create(request: Request):
    return templates.TemplateResponse("layout/profile_create.html", {"request": request})

@app.get("/mobile/reset", response_class=HTMLResponse, name="mobile_reset")
async def mobile_reset(request: Request):
    return templates.TemplateResponse("layout/reset.html", {"request": request})

@app.get("/mobile/reset/verify", response_class=HTMLResponse, name="mobile_reset_verify")
async def mobile_reset_verify(request: Request):
    return templates.TemplateResponse("layout/reset_verify.html", {"request": request})

@app.get("/mobile/reset/password", response_class=HTMLResponse, name="mobile_reset_password")
async def mobile_reset_password(request: Request):
    return templates.TemplateResponse("layout/reset_password.html", {"request": request})

# –ú–æ–±–∏–ª—å–Ω—ã–µ (–∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ) –º–∞—Ä—à—Ä—É—Ç—ã
@app.get("/mobile", response_class=HTMLResponse, name="dashboard")
async def mobile_root(request: Request):
    return templates.TemplateResponse("layout/dashboard.html", {"request": request})

@app.get("/mobile/auth", response_class=HTMLResponse, name="mobile_auth")
async def mobile_auth(request: Request):
    return templates.TemplateResponse("layout/auth.html", {"request": request})

@app.get("/mobile/services", response_class=HTMLResponse, name="services")
async def mobile_services(request: Request, db: Session = Depends(deps.get_db)):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ –ë–î
    categories = db.query(ServiceCategory).filter(ServiceCategory.is_active == True).all()
    
    return templates.TemplateResponse("layout/services.html", {
        "request": request,
        "categories": categories
    })

@app.get("/mobile/services/{category_slug}", response_class=HTMLResponse, name="service_category")
async def mobile_service_category(request: Request, category_slug: str, db: Session = Depends(deps.get_db)):
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Å–ª–∞–≥—É
    category = db.query(ServiceCategory).filter(
        ServiceCategory.slug == category_slug,
        ServiceCategory.is_active == True
    ).first()
    
    if not category:
        raise HTTPException(status_code=404, detail="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò
    service_cards = db.query(ServiceCard).options(
        joinedload(ServiceCard.images)
    ).filter(
        ServiceCard.category_id == category.id,
        ServiceCard.is_active == True
    ).all()
    
    return templates.TemplateResponse("layout/service_category.html", {
        "request": request,
        "category": category,
        "service_cards": service_cards
    })

@app.get("/mobile/services/card/{card_id}", response_class=HTMLResponse, name="service_detail")
async def mobile_service_detail(request: Request, card_id: int, db: Session = Depends(deps.get_db)):
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ ID —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    service_card = db.query(ServiceCard).options(joinedload(ServiceCard.images)).filter(
        ServiceCard.id == card_id,
        ServiceCard.is_active == True
    ).first()
    
    if not service_card:
        raise HTTPException(status_code=404, detail="–ó–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = db.query(ServiceCategory).filter(
        ServiceCategory.id == service_card.category_id
    ).first()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–µ)
    similar_services = db.query(ServiceCard).filter(
        ServiceCard.category_id == service_card.category_id,
        ServiceCard.id != service_card.id,
        ServiceCard.is_active == True
    ).limit(6).all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º has_360_tour –∫ service_card
    service_card.has_360_tour = service_card.has_360_tour()
    
    return templates.TemplateResponse("layout/service_detail.html", {
        "request": request,
        "service_card": service_card,
        "category": category,
        "similar_services": similar_services
    })

@app.get("/mobile/profile", response_class=HTMLResponse, name="profile")
async def mobile_profile(request: Request, tab: str = None, db: Session = Depends(deps.get_db)):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = None
    formatted_user_listings = []
    formatted_saved_listings = []
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookie
    auth_token = request.cookies.get('access_token')
    auth_header = request.headers.get('Authorization')
    
    if auth_header and auth_header.startswith('Bearer '):
        auth_token = auth_header.split(' ')[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —à–∞–ø–∫–µ
    weather = {"temperature": "+20¬∞"}
    currency = {"value": "69.8"}
    
    if auth_token:
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
            payload = pyjwt.decode(auth_token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
            user_id = payload.get("sub")
            
            if user_id:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
                user = db.query(models.User).filter(models.User.id == user_id).first()
                
                if user:
                    print(f"DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email}, —Ä–æ–ª—å: {user.role}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                    try:
                        user_listings = db.query(models.Property).options(
                            joinedload(models.Property.images)
                        ).filter(models.Property.owner_id == user_id).all()
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞
                        for prop in user_listings:
                            # –ù–∞—Ö–æ–¥–∏–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
                            main_image = next((img for img in prop.images if img.is_main), None) or \
                                       (prop.images[0] if prop.images else None)
                            
                            formatted_user_listings.append({
                                "id": prop.id,
                                "title": prop.title,
                                "price": prop.price,
                                "address": prop.address,
                                "rooms": prop.rooms,
                                "area": prop.area,
                                "status": prop.status,
                                "notes": prop.notes,  # –î–∞—Ç–∞ —Å—ä–µ–º–∫–∏ 360
                                "tour_360_url": prop.tour_360_url,
                                "has_tour": bool(prop.tour_360_url or prop.tour_360_file_id),  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
                                "image_url": get_valid_image_url(main_image.url if main_image else None)
                            })
                        
                        print(f"DEBUG: –ù–∞–π–¥–µ–Ω–æ {len(formatted_user_listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                        
                    except Exception as e:
                        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                        favorites_query = db.query(models.Favorite).filter(models.Favorite.user_id == user_id).all()
                        saved_property_ids = [fav.property_id for fav in favorites_query]
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ ID —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                        if saved_property_ids:
                            saved_listings = db.query(models.Property).options(
                                joinedload(models.Property.images)
                            ).filter(
                                models.Property.id.in_(saved_property_ids)
                            ).all()
                            
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞
                            for prop in saved_listings:
                                # –ù–∞—Ö–æ–¥–∏–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
                                main_image = next((img for img in prop.images if img.is_main), None) or \
                                           (prop.images[0] if prop.images else None)
                                
                                formatted_saved_listings.append({
                                    "id": prop.id,
                                    "title": prop.title,
                                    "price": prop.price,
                                    "address": prop.address,
                                    "rooms": prop.rooms,
                                    "area": prop.area,
                                    "status": prop.status,
                                    "tour_360_url": prop.tour_360_url,
                                    "has_tour": bool(prop.tour_360_url or prop.tour_360_file_id),  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
                                    "image_url": get_valid_image_url(main_image.url if main_image else None)
                                })
                            
                            print(f"DEBUG: –ù–∞–π–¥–µ–Ω–æ {len(saved_listings)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
                        else:
                            print("DEBUG: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
                    except Exception as e:
                        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not user:
        return RedirectResponse('/mobile/auth', status_code=303)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    user_data = {
        "id": user.id,
        "email": user.email,
        "phone": user.phone,
        "is_active": user.is_active,
        "role": user.role.value if user.role else "USER",
        "created_at": user.created_at
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if user.role == models.UserRole.COMPANY:
        user_data.update({
            "full_name": user.company_name or "–ö–æ–º–ø–∞–Ω–∏—è",
            "display_name": user.company_name or "–ö–æ–º–ø–∞–Ω–∏—è", 
            "company_name": user.company_name,
            "company_number": user.company_number,
            "company_owner": user.company_owner,
            "company_address": user.company_address,
            "company_description": user.company_description,
            "avatar_url": user.company_logo_url,
            "is_company": True
        })
    else:
        user_data.update({
            "full_name": user.full_name or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}",
            "display_name": user.full_name or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}",
            "avatar_url": None,
            "is_company": False
        })
    
    return templates.TemplateResponse(
        "layout/profile.html", 
        {
            "request": request, 
            "user": user_data, 
            "user_listings": formatted_user_listings, 
            "saved_listings": formatted_saved_listings,
            "active_tab": tab or "listings",
            "weather": weather,
            "currency": currency
        }
    )

@app.get("/mobile/create-listing", response_class=HTMLResponse, name="create_listing")
async def mobile_create_listing(request: Request, db: Session = Depends(deps.get_db)):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = None
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookie
    auth_token = request.cookies.get('access_token')
    auth_header = request.headers.get('Authorization')
    
    if auth_header and auth_header.startswith('Bearer '):
        auth_token = auth_header.split(' ')[1]
    
    if auth_token:
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
            payload = pyjwt.decode(auth_token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
            user_id = payload.get("sub")
            
            if user_id:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
                user = db.query(models.User).filter(models.User.id == user_id).first()
                print(f"DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {user.email}, —Ä–æ–ª—å: {user.role}")
                
                # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                if user and user.role == models.UserRole.COMPANY:
                    print(f"DEBUG: –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {user.company_name}, –≤–ª–∞–¥–µ–ª–µ—Ü: {user.company_owner}")
                
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not user:
        return RedirectResponse(url="/mobile/auth")
    
    return templates.TemplateResponse(
        "layout/create-listing.html",
        {
            "request": request,
            "user": user
        }
    )

@app.get("/mobile/search", response_class=HTMLResponse, name="search")
async def mobile_search(
    request: Request, 
    category: str = None, 
    price_min: int = None, 
    price_max: int = None, 
    min_area: float = None, 
    max_area: float = None,
    rooms: int = None,
    min_floor: int = None,
    max_floor: int = None,
    balcony: bool = None,
    furniture: bool = None,
    renovation: bool = None,
    parking: bool = None,
    q: str = None,
    db: Session = Depends(deps.get_db)
):
    print("\n===================================================")
    print("DEBUG: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:")
    print(f"  URL: {request.url}")
    print(f"  –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {q}")
    print(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
    print(f"  –¶–µ–Ω–∞: {price_min} - {price_max}")
    print(f"  –ü–ª–æ—â–∞–¥—å: {min_area} - {max_area}")
    print(f"  –ö–æ–º–Ω–∞—Ç—ã: {rooms}")
    print(f"  –≠—Ç–∞–∂: {min_floor} - {max_floor}")
    print(f"  –ë–∞–ª–∫–æ–Ω: {balcony}, –ú–µ–±–µ–ª—å: {furniture}, –†–µ–º–æ–Ω—Ç: {renovation}, –ü–∞—Ä–∫–∏–Ω–≥: {parking}")
    print("===================================================")
    
    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –¥–µ–ª–∞–µ–º "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å" –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not category:
        category = "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    query = db.query(models.Property).filter(models.Property.status == 'active')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
    categories = db.query(models.Category).all()
    print(f"DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {[cat.name for cat in categories]}")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥ –∏–∑ JSON —Ñ–∞–π–ª–∞
    general_categories = load_categories_from_json()
    print(f"DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ–±—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ JSON: {[cat['name'] for cat in general_categories]}")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
    if category and category != "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
        print(f"DEBUG: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
        query = query.join(models.Property.categories).filter(models.Category.name == category)
    
    # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ –∞–¥—Ä–µ—Å–µ
    if q:
        search_term = f"%{q}%"
        query = query.filter(or_(
            models.Property.title.ilike(search_term),
            models.Property.address.ilike(search_term),
            models.Property.description.ilike(search_term)
        ))
    
    # –§–∏–ª—å—Ç—Ä—ã –ø–æ —Ü–µ–Ω–µ
    if price_min is not None:
        query = query.filter(models.Property.price >= price_min)
    
    if price_max is not None:
        query = query.filter(models.Property.price <= price_max)
    
    # –§–∏–ª—å—Ç—Ä—ã –ø–æ –ø–ª–æ—â–∞–¥–∏
    if min_area is not None:
        query = query.filter(models.Property.area >= min_area)
    
    if max_area is not None:
        query = query.filter(models.Property.area <= max_area)
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–Ω–∞—Ç
    if rooms is not None:
        query = query.filter(models.Property.rooms == rooms)
    
    # –§–∏–ª—å—Ç—Ä—ã –ø–æ —ç—Ç–∞–∂—É
    if min_floor is not None:
        query = query.filter(models.Property.floor >= min_floor)
    
    if max_floor is not None:
        query = query.filter(models.Property.floor <= max_floor)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    if balcony is not None and balcony:
        query = query.filter(models.Property.has_balcony == True)
    
    if furniture is not None and furniture:
        query = query.filter(models.Property.has_furniture == True)
    
    if renovation is not None and renovation:
        query = query.filter(models.Property.has_renovation == True)
    
    if parking is not None and parking:
        query = query.filter(models.Property.has_parking == True)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    properties_db = query.options(joinedload(models.Property.images)).all()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    properties = []
    for prop in properties_db:
        # –ù–∞—Ö–æ–¥–∏–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        main_image = next((img for img in prop.images if img.is_main), None) or \
                   (prop.images[0] if prop.images else None)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images = [get_valid_image_url(img.url) for img in prop.images] if prop.images else []
        
        properties.append({
            "id": prop.id,
            "title": prop.title,
            "price": prop.price,
            "address": prop.address,
            "rooms": prop.rooms,
            "area": prop.area,
            "floor": prop.floor,
            "building_floors": prop.building_floors,
            "has_tour": bool(prop.tour_360_url or prop.tour_360_file_id),
            "tour_360_url": prop.tour_360_url,
            "tour_360_file_id": prop.tour_360_file_id,
            "tour_360_optimized_url": prop.tour_360_optimized_url,
            "has_balcony": prop.has_balcony,
            "has_furniture": prop.has_furniture,
            "has_renovation": prop.has_renovation,
            "has_parking": prop.has_parking,
            "image_url": get_valid_image_url(main_image.url if main_image else None),
            "images": images,
            "images_count": len(images)
        })
    
    # –ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–≥–æ–¥—ã –∏ –≤–∞–ª—é—Ç (—É–±–∏—Ä–∞—é –º–µ–¥–ª–µ–Ω–Ω—ã–µ API –∑–∞–ø—Ä–æ—Å—ã)
    weather = {"temperature": "+20¬∞"}
    currency = {"value": "87.5"}
    
    return templates.TemplateResponse("layout/search.html", {
        "request": request, 
        "properties": properties,
        "weather": weather,
        "currency": currency,
        "categories": categories,
        "general_categories": general_categories,  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        "selected_category": category,
        "q": q,
        "filter": {
            "category": category,
            "price_min": price_min,
            "price_max": price_max,
            "min_area": min_area,
            "max_area": max_area,
            "rooms": rooms,
            "min_floor": min_floor,
            "max_floor": max_floor,
            "balcony": balcony,
            "furniture": furniture,
            "renovation": renovation,
            "parking": parking
        }
    })

@app.get("/mobile/chats", response_class=HTMLResponse, name="chats")
async def mobile_chats(request: Request):
    return templates.TemplateResponse("layout/chats.html", {"request": request})

@app.get("/mobile/support", response_class=HTMLResponse, name="support")
async def mobile_support(request: Request):
    return templates.TemplateResponse("layout/support.html", {"request": request})

@app.get("/mobile/property/{property_id}", response_class=HTMLResponse, name="property")
async def mobile_property_detail(request: Request, property_id: int, db: Session = Depends(deps.get_db)):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    current_user = None
    token = request.cookies.get('access_token')
    
    if token:
        try:
            payload = pyjwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
            user_id = int(payload.get("sub"))
            current_user = db.query(models.User).filter(models.User.id == user_id).first()
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –ë–î
    property = db.query(models.Property).options(
        joinedload(models.Property.owner),
        joinedload(models.Property.images),
        joinedload(models.Property.categories)
    ).filter(models.Property.id == property_id).first()
    
    if not property:
        return templates.TemplateResponse("404.html", {"request": request})
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    try:
        # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –Ω–∞–∫—Ä—É—Ç–∫–∏
        client_ip = request.client.host
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
        # 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        # 2. –û–±—ä—è–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        should_increment = True
        
        if current_user and property.owner_id == current_user.id:
            should_increment = False  # –í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö
            print(f"DEBUG: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ - –≤–ª–∞–¥–µ–ª–µ—Ü –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
        
        if property.status != models.PropertyStatus.ACTIVE:
            should_increment = False  # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è
            print(f"DEBUG: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ - –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ: {property.status}")
        
        if should_increment:
            property.views = (property.views or 0) + 1
            db.commit()
            print(f"DEBUG: –£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {property_id}: {property.views}")
        
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    is_favorite = False
    if current_user:
        favorite = db.query(models.Favorite).filter(
            models.Favorite.user_id == current_user.id,
            models.Favorite.property_id == property.id
        ).first()
        is_favorite = favorite is not None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    is_owner = current_user and property.owner_id == current_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    category = None
    if property.categories:
        category = property.categories[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞, –≤ —Ç–æ–º –∂–µ –≥–æ—Ä–æ–¥–µ)
    similar_properties = db.query(models.Property).options(
        joinedload(models.Property.images)
    ).filter(
        models.Property.id != property.id,
        models.Property.city == property.city,
        models.Property.status == models.PropertyStatus.ACTIVE  # –ò—Å–ø–æ–ª—å–∑—É–µ–º enum –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
    ).limit(5).all()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    similar_properties_data = []
    for prop in similar_properties:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        main_image_url = "/static/layout/assets/img/property-placeholder.jpg"
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä
        if prop.images_data and isinstance(prop.images_data, list):
            for img_data in prop.images_data:
                if isinstance(img_data, dict) and "urls" in img_data:
                    main_image_url = img_data["urls"].get("medium", img_data["urls"].get("original", ""))
                    if img_data.get("is_main", False):
                        break  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ
        elif prop.images:
            main_image = next((img for img in prop.images if img.is_main), None) or prop.images[0]
            if main_image:
                main_image_url = main_image.url
        
        similar_properties_data.append({
            "id": prop.id,
            "title": prop.title,
            "price": prop.price,
            "address": prop.address,
            "rooms": prop.rooms,
            "area": prop.area,
            "image_url": main_image_url
        })
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    property_data = {
        "id": property.id,
        "title": property.title,
        "description": property.description,
        "price": property.price,
        "address": property.address,
        "city": property.city,
        "area": property.area,
        "status": property.status.value.lower() if property.status else "draft",
        "is_featured": property.is_featured,
        "views": property.views or 0,  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ views
        "created_at": property.created_at.strftime("%d.%m.%Y") if property.created_at else None,  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        "tour_360_url": property.tour_360_url,
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö 360¬∞ –ø–∞–Ω–æ—Ä–∞–º
        "tour_360_file_id": property.tour_360_file_id,
        "tour_360_original_url": property.tour_360_original_url,
        "tour_360_optimized_url": property.tour_360_optimized_url,
        "tour_360_preview_url": property.tour_360_preview_url,
        "tour_360_thumbnail_url": property.tour_360_thumbnail_url,
        "tour_360_metadata": property.tour_360_metadata,
        "tour_360_uploaded_at": property.tour_360_uploaded_at,
        "has_360": bool(property.tour_360_url or property.tour_360_file_id),  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ has_360
        "rooms": property.rooms,
        "floor": property.floor,
        "building_floors": property.building_floors,
        "type": property.type or "apartment",
        "type_display": {
            "apartment": "–ö–≤–∞—Ä—Ç–∏—Ä–∞",
            "house": "–î–æ–º", 
            "commercial": "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è",
            "land": "–£—á–∞—Å—Ç–æ–∫"
        }.get(property.type or "apartment", "–ö–≤–∞—Ä—Ç–∏—Ä–∞"),  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞
        "is_owner": is_owner,
        "notes": property.notes,
        "has_balcony": property.has_balcony,
        "has_furniture": property.has_furniture,
        "has_renovation": property.has_renovation,
        "has_parking": property.has_parking,
        "has_elevator": getattr(property, 'has_elevator', False),
        "owner": {
            "id": property.owner.id,
            "full_name": property.owner.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
            "phone": property.owner.phone or "–ù–µ —É–∫–∞–∑–∞–Ω",
            "email": property.owner.email or "–ù–µ —É–∫–∞–∑–∞–Ω",
            "is_company": property.owner.role == models.UserRole.COMPANY if property.owner.role else False,
            "company_name": property.owner.company_name,
            "logo_url": property.owner.company_logo_url
        } if property.owner else None,
        "category": {
            "id": category.id,
            "name": category.name
        } if category else None,
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä–∞
        "media_id": property.media_id,
        "images_data": property.images_data,
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–∞—Ä—Ç—ã
        "latitude": property.latitude,
        "longitude": property.longitude,
        "formatted_address": property.formatted_address,
    }
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä, –ø–æ—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ
    images_list = []
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä–∞
    if property.images_data and isinstance(property.images_data, list):
        for img_data in property.images_data:
            if isinstance(img_data, dict) and "urls" in img_data:
                images_list.append({
                    "url": img_data["urls"].get("medium", img_data["urls"].get("original", "")),
                    "is_main": img_data.get("is_main", False),
                    "from_media_server": True
                })
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å media_id, –Ω–æ –Ω–µ—Ç images_data, —Å—Ç—Ä–æ–∏–º URL –ø–æ media_id
    elif property.media_id:
        # –°—Ç—Ä–æ–∏–º URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ media_id
        media_base_url = "https://wazir.kg/state"
        for i in range(1, 11):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_url = f"{media_base_url}/properties/{property.media_id}/image_{i}.jpg"
            images_list.append({
                "url": image_url,
                "is_main": i == 1,  # –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ
                "from_media_server": True
            })
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º—Å—è 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if i >= 5:
                break
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ
    if not images_list and property.images:
        images_list = [{"url": img.url, "is_main": img.is_main, "from_media_server": False} for img in property.images]
    
    property_data["images"] = images_list
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —à–∞–ø–∫–µ
    weather = None
    currency = None
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
        weather = {"temperature": "+20¬∞"}
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∫ —Å–æ–º—É
        import requests
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API –¥–ª—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
            response = requests.get("https://api.exchangerate-api.com/v4/latest/USD", timeout=5)
            if response.status_code == 200:
                data = response.json()
                kgs_rate = data.get("rates", {}).get("KGS", 87.5)
                currency = {"value": f"{kgs_rate:.1f}"}
            else:
                currency = {"value": "87.5"}  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        except:
            currency = {"value": "87.5"}  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –∏–ª–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã: {e}")
        weather = {"temperature": "+20¬∞"}
        currency = {"value": "87.5"}
    
    return templates.TemplateResponse("layout/property.html", {
        "request": request,
        "property": property_data,
        "similar_properties": similar_properties_data,
        "weather": weather,
        "currency": currency,
        "user": current_user,
        "is_favorite": is_favorite
    })

@app.get("/mobile/chat/{user_id}", response_class=HTMLResponse, name="chat")
async def mobile_chat(request: Request, user_id: int, db: Session = Depends(deps.get_db)):
    # –ü–æ–ª—É—á–∞–µ–º property_id –∏–∑ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    property_id = request.query_params.get("property_id")
    context = {"request": request, "user_id": user_id}
    
    if property_id:
        try:
            property_id = int(property_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω property_id
            property_item = db.query(models.Property).filter(models.Property.id == property_id).first()
            if property_item:
                context["property"] = {
                    "id": property_item.id,
                    "title": property_item.title,
                    "price": property_item.price
                }
        except ValueError:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ property_id –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
            pass
    
    return templates.TemplateResponse("layout/chat.html", context)

# –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è WebSocket
@app.get("/mobile/test-websocket", response_class=HTMLResponse)
async def test_websocket_page(request: Request):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    return templates.TemplateResponse("test_websocket.html", {"request": request})

@app.get("/mobile/test-media", response_class=HTMLResponse)
async def test_media_page(request: Request):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä–∞"""
    return templates.TemplateResponse("layout/test_media.html", {
        "request": request,
        "media_server": "https://wazir.kg/state"
    })

@app.post("/mobile/test-upload")
async def test_media_upload_mobile(
    request: Request,
    title: str = Form(...),
    photos: List[UploadFile] = File(...)
):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    
    if not photos:
        raise HTTPException(status_code=400, detail="No files provided")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    allowed_types = ["image/jpeg", "image/jpg", "image/png", "image/webp"]
    for file in photos:
        if file.content_type not in allowed_types:
            raise HTTPException(
                status_code=400, 
                detail=f"File type {file.content_type} not allowed"
            )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–∏–∞-–∑–∞–≥—Ä—É–∑—á–∏–∫
    from app.utils.media_uploader import media_uploader
    
    result = await media_uploader.upload_property_images(photos)
    
    if result["status"] != "success":
        raise HTTPException(status_code=400, detail=result["message"])
    
    return {
        "status": "success",
        "property_id": result.get("property_id"),
        "files_count": result.get("count", 0),
        "files": result.get("files", []),
        "message": f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {result.get('count', 0)} —Ñ–∞–π–ª–æ–≤"
    }

# –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ–π API-—Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
debug_router = APIRouter(prefix="/debug")

# –î–æ–±–∞–≤–ª—è–µ–º debug_router –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app.include_router(debug_router)

# –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –æ—Ç–ª–∞–¥–∫–∏
@debug_router.get("/")
async def get_debug_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    return {
        "status": "debug_active",
        "timestamp": datetime.now().isoformat(),
        "routes": [
            "/debug/",
            "/debug/db-test"
        ]
    }

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
@app.get("/api/v1/currency")
async def get_currency_rate():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞ –∫ —Å–æ–º—É"""
    try:
        import requests
        response = requests.get("https://api.exchangerate-api.com/v4/latest/USD", timeout=5)
        if response.status_code == 200:
            data = response.json()
            kgs_rate = data.get("rates", {}).get("KGS", 87.5)
            return {
                "success": True,
                "currency": "USD/KGS",
                "rate": round(kgs_rate, 1),
                "formatted": f"{kgs_rate:.1f}",
                "updated_at": datetime.now().isoformat()
            }
        else:
            return {
                "success": False,
                "currency": "USD/KGS", 
                "rate": 87.5,
                "formatted": "87.5",
                "error": "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            }
    except Exception as e:
        return {
            "success": False,
            "currency": "USD/KGS",
            "rate": 87.5, 
            "formatted": "87.5",
            "error": str(e)
        }

# API –¥–ª—è —á–∞—Ç–∞
from pydantic import BaseModel

from app.models.chat import AppChatMessageModel
from typing import List, Optional, Dict, Any

class MessageReadRequest(BaseModel):
    message_id: int

@app.post("/api/v1/chat/messages/read")
async def mark_message_as_read(request: MessageReadRequest, db: Session = Depends(deps.get_db)):
    """ –ú–∞—Ä–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ """
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –ù–∞–ø—Ä–∏–º–µ—Ä: message = db.query(AppChatMessageModel).filter(AppChatMessageModel.id == request.message_id).first()
        # if message:
        #    message.is_read = True
        #    db.commit()
        print(f"DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ {request.message_id} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ")
        return {"status": "success", "message": f"–°–æ–æ–±—â–µ–Ω–∏–µ {request.message_id} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"}
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ: {e}")
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"}

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
@app.get("/api/v1/users/{user_id}")
async def get_user(user_id: int, db: Session = Depends(deps.get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID"""
    try:
        print(f"DEBUG: –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = db.query(models.User).filter(models.User.id == user_id).first()
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –µ–≥–æ –¥–∞–Ω–Ω—ã–º–∏
        if user:
            print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î: {user.email}, {user.full_name}, —Ä–æ–ª—å: {user.role}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
            if user.role == models.UserRole.COMPANY:
                display_name = user.company_name or user.full_name or "–ö–æ–º–ø–∞–Ω–∏—è"
                avatar_url = user.company_logo_url or f"/static/img/company{user_id}.png"
            else:
                display_name = user.full_name or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
                avatar_url = f"/static/img/avatar{user_id}.png"
            
            return {
                "id": user.id,
                "email": user.email,
                "full_name": display_name,
                "avatar": avatar_url,
                "status": "–û–Ω–ª–∞–π–Ω" if user.is_active else "–ù–µ –≤ —Å–µ—Ç–∏",
                "is_active": user.is_active,
                "role": user.role.value if user.role else "USER",
                "company_name": user.company_name,
                "company_number": user.company_number,
                "phone": user.phone
            }
        else:
            print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            return {
                "id": user_id,
                "email": f"user{user_id}@example.com",
                "full_name": f"User {user_id}",
                "avatar": f"/static/img/avatar{user_id}.png",
                "status": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "is_active": False,
                "role": "USER"
            }
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        return {
            "id": user_id,
            "email": f"user{user_id}@example.com",
            "full_name": f"User {user_id}",
            "avatar": f"/static/img/avatar{user_id}.png",
            "status": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "is_active": True,
            "role": "USER"
        }

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
@app.get("/api/v1/chat/messages/{user_id}")
async def get_chat_messages(user_id: int, request: Request, db: Session = Depends(deps.get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_user = deps.get_current_user_optional(request, db)
        current_user_id = current_user.id if current_user else 0
        if current_user_id == 0:
            print("DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return []
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π chat_manager –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
        from app.websockets.chat_manager import manager as chat_manager
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        chat_id = chat_manager.get_chat_id(current_user_id, user_id)
        print(f"DEBUG: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π chat_id: {chat_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {current_user_id} –∏ {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏ chat_manager
        messages = chat_manager.chat_messages.get(chat_id, [])
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç –≤ –ø–∞–º—è—Ç–∏, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Ö –∏–∑ —Ñ–∞–π–ª–∞
        if not messages and os.path.exists("chat_messages.json"):
            try:
                with open("chat_messages.json", "r", encoding="utf-8") as f:
                    data = json.load(f)
                    
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –Ω–æ–≤–æ–º—É chat_id
                    messages = data.get(chat_id, [])
                    
                    if not messages:
                        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ä–æ–º—É chat_id="4"
                        # –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        old_messages = data.get("4", [])
                        
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                        filtered_messages = []
                        for msg in old_messages:
                            if (str(msg.get("sender_id")) == str(current_user_id) and str(msg.get("receiver_id")) == str(user_id)) or \
                               (str(msg.get("sender_id")) == str(user_id) and str(msg.get("receiver_id")) == str(current_user_id)):
                                # –û–±–Ω–æ–≤–ª—è–µ–º chat_id –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
                                msg["chat_id"] = chat_id
                                filtered_messages.append(msg)
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        messages = filtered_messages
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏ chat_manager
                        if messages:
                            for msg in messages:
                                chat_manager.add_message_to_memory(chat_id, msg)
                    
                    print(f"DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                    # –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –º—ã –º–∏–≥—Ä–∏—Ä–æ–≤–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ —Ñ–∞–π–ª
                    chat_manager.save_messages_to_file()
            except Exception as e:
                print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞: {e}")
        
        print(f"DEBUG: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        return messages
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–ª–æ —Ä–∞–±–æ—Ç–∞—Ç—å
        return []

@app.get("/admin/login")
async def admin_login_get(request: Request):
    return templates.TemplateResponse("admin/index.html", {"request": request})

@app.post("/admin/login")
async def admin_login_post(
    request: Request,
    username: str = Form(...),
    password: str = Form(...),
    db: Session = Depends(deps.get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin = db.query(models.User).filter(
        models.User.email == username,
        models.User.role == models.UserRole.ADMIN
    ).first()
    
    if not admin or not verify_password(password, admin.hashed_password):
        return templates.TemplateResponse(
            "admin/index.html",
            {"request": request, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"}
        )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    access_token = create_access_token(
        data={"sub": str(admin.id), "is_admin": True}
    )
    
    response = RedirectResponse(url="/admin", status_code=303)
    response.set_cookie(
        key="access_token",
        value=access_token,
        httponly=False,  # –ü–æ–∑–≤–æ–ª—è–µ–º JavaScript –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–æ–∫–µ–Ω—É
        max_age=3600 * 24,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –¥–æ 24 —á–∞—Å–æ–≤
        samesite="lax",
        path="/"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –≤—Å–µ—Ö –ø—É—Ç–µ–π
    )
    
    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ URL –ø–µ—Ä–≤—ã–π —Ä–∞–∑
    return response

@app.get("/admin", response_class=HTMLResponse)
@app.get("/admin/dashboard", response_class=HTMLResponse)
async def admin_dashboard(request: Request, db: Session = Depends(deps.get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user = await check_admin_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
    total_users = db.query(models.User).count()
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    total_properties = db.query(models.Property).count()
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–∑–∞—è–≤–∫–∏)
    pending_properties = db.query(models.Property).filter(models.Property.status == "pending").count()
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤
    total_chats = db.query(AppChatModel).count()
    
    # –î–ª—è —Ç–∏–∫–µ—Ç–æ–≤ (–æ–±—Ä–∞—â–µ–Ω–∏–π –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É) –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –±—ã –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ë–î
    total_tickets = 13
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    latest_properties_query = db.query(models.Property).options(
        joinedload(models.Property.owner),
        joinedload(models.Property.images)
    ).order_by(models.Property.created_at.desc()).limit(5).all()
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    latest_properties = []
    
    status_display = {
        "draft": "–ß–µ—Ä–Ω–æ–≤–∏–∫",
        "pending": "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
        "active": "–ê–∫—Ç–∏–≤–Ω–æ",
        "rejected": "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
        "sold": "–ü—Ä–æ–¥–∞–Ω–æ"
    }
    
    for prop in latest_properties_query:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
        price = prop.price or 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        status_value = prop.status.value if prop.status else "draft"
        status = status_display.get(status_value, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
        property_type = "sale"
        if hasattr(prop, 'property_type') and prop.property_type:
            property_type = prop.property_type.value
        
        property_type_display = {
            "sale": "–ü—Ä–æ–¥–∞–∂–∞",
            "rent": "–ê—Ä–µ–Ω–¥–∞"
        }.get(property_type, property_type)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤
        latest_properties.append({
            "id": prop.id,
            "title": prop.title or f"–û–±—ä–µ–∫—Ç #{prop.id}",
            "price": price,
            "status": status_value,
            "status_display": status,
            "property_type": property_type,
            "property_type_display": property_type_display,
            "created_at": prop.created_at.isoformat() if prop.created_at else None,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
        })
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–∞–≤–Ω–∏–≤–∞—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–µ—Å—è—Ü–µ–º
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–∫ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ä–æ—Å—Ç–∞
    
    # –î–µ–ª–∞–µ–º —Ä–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_user_id = db.query(models.User.id).order_by(models.User.id.desc()).first()
    last_user_id = last_user_id[0] if last_user_id else 0
    users_change = round((last_user_id - total_users) / max(total_users, 1) * 100) if total_users > 0 else 0
    users_change = min(max(users_change, -99), 99)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º -99 –¥–æ 99
    
    # –î–µ–ª–∞–µ–º —Ä–æ—Å—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    last_property_id = db.query(models.Property.id).order_by(models.Property.id.desc()).first()
    last_property_id = last_property_id[0] if last_property_id else 0
    properties_change = round((last_property_id - total_properties) / max(total_properties, 1) * 100) if total_properties > 0 else 0
    properties_change = min(max(properties_change, -99), 99)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º -99 –¥–æ 99
    
    return templates.TemplateResponse(
        "admin/dashboard.html",
        {
            "request": request,
            "current_admin": user,  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            "total_users": total_users,
            "users_count": total_users,
            "users_change": users_change,
            "total_properties": total_properties,
            "properties_count": total_properties,
            "properties_change": properties_change,
            "total_chats": total_chats,
            "chats_change": total_chats,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –∫–∞–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç
            "requests_count": pending_properties,  # –ó–∞—è–≤–∫–∏ = –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            "requests_change": pending_properties,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –∫–∞–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç
            "tickets_count": total_tickets,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É
            "tickets_change": -5,  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            "last_properties": latest_properties,
            "last_tickets": [],  # –í –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
        }
    )

@app.get("/admin/users", response_class=HTMLResponse)
async def admin_users(request: Request, db: Session = Depends(deps.get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user = await check_admin_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
        
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –û–ë–´–ß–ù–´–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏—Å–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    users = db.query(models.User).filter(models.User.role == models.UserRole.USER).all()
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    enhanced_users = []
    
    for user_item in users:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        properties_count = db.query(models.Property).filter(models.Property.owner_id == user_item.id).count()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å 360-—Ç—É—Ä–∞–º–∏
        tours_count = db.query(models.Property).filter(
            models.Property.owner_id == user_item.id,
            models.Property.tour_360_url.isnot(None),
            models.Property.tour_360_url != ""
        ).count()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        registered_at = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        if hasattr(user_item, 'created_at') and user_item.created_at:
            registered_at = user_item.created_at.strftime("%Y-%m-%d %H:%M:%S")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤
        enhanced_users.append({
            "id": user_item.id,
            "full_name": user_item.full_name if hasattr(user_item, 'full_name') and user_item.full_name else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_item.id}",
            "phone": user_item.phone if hasattr(user_item, 'phone') and user_item.phone else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            "email": user_item.email if hasattr(user_item, 'email') and user_item.email else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            "is_active": user_item.is_active if hasattr(user_item, 'is_active') else True,
            "properties_count": properties_count,
            "tours_count": tours_count,
            "registered_at": registered_at,
            "avatar_url": user_item.avatar_url if hasattr(user_item, 'avatar_url') and user_item.avatar_url else None,
        })
    
    return templates.TemplateResponse(
        "admin/users.html",
        {
            "request": request,
            "current_admin": user,  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            "users": enhanced_users,
            "start_item": 1,
            "end_item": len(enhanced_users),
            "total_users": len(enhanced_users),
            "search_query": "",
            "status": None,
            "current_page": 1,
            "total_pages": 1,
            "pages": [1],
            "show_ellipsis": False,
        }
    )

@app.get("/admin/properties", response_class=HTMLResponse, name="admin_properties")
async def admin_properties(
    request: Request, 
    status: str = Query(None), 
    property_type: str = Query(None),
    search: str = Query(None),
    page: int = Query(1, ge=1),
    db: Session = Depends(deps.get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user = await check_admin_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
        
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
    categories = db.query(models.Category).all()
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ –æ–±—ä–µ–∫—Ç–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    properties_query = db.query(models.Property).options(
        joinedload(models.Property.owner),
        joinedload(models.Property.images)
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if status:
        properties_query = properties_query.filter(models.Property.status == status)
    
    if property_type:
        try:
            property_type_id = int(property_type)
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ —Å–≤—è–∑—å PropertyCategory
            properties_query = properties_query.join(models.PropertyCategory).filter(
                models.PropertyCategory.category_id == property_type_id
            )
        except (ValueError, TypeError):
            # –ï—Å–ª–∏ property_type –Ω–µ —á–∏—Å–ª–æ, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –æ–±—ä–µ–∫—Ç–∞
            properties_query = properties_query.filter(models.Property.type == property_type)
            
    if search:
        search_term = f"%{search}%"
        properties_query = properties_query.filter(
            or_(
                models.Property.title.ilike(search_term),
                models.Property.address.ilike(search_term),
                models.Property.description.ilike(search_term)
            )
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    total_properties = properties_query.count()
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    items_per_page = 10
    total_pages = (total_properties + items_per_page - 1) // items_per_page if total_properties > 0 else 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page > total_pages and total_pages > 0:
        page = total_pages
        
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    start_idx = (page - 1) * items_per_page
    properties_paginated = properties_query.order_by(desc(models.Property.created_at)).offset(start_idx).limit(items_per_page).all()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    properties_formatted = []
    
    for prop in properties_paginated:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
        if prop.price:
            if prop.price >= 1000000:
                price_formatted = f"{prop.price/1000000:.1f} –º–ª–Ω KGZ".replace('.0', '')
            else:
                price_formatted = f"{prop.price/1000:.1f} —Ç—ã—Å KGZ".replace('.0', '')
        else:
            price_formatted = "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        
        # –°—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        status_display_map = {
            'active': '–ê–∫—Ç–∏–≤–Ω–æ',
            'pending': '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
            'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
            'draft': '–ß–µ—Ä–Ω–æ–≤–∏–∫',
            'sold': '–ü—Ä–æ–¥–∞–Ω–æ',
            'inactive': '–ù–µ–∞–∫—Ç–∏–≤–Ω–æ'
        }
        status_display = status_display_map.get(prop.status, prop.status or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
        owner_name = prop.owner.full_name if prop.owner and prop.owner.full_name else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        owner_email = prop.owner.email if prop.owner and prop.owner.email else ""
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        main_image_url = "/static/images/default-property.jpg"
        all_images = []
        
        try:
            for img in prop.images:
                if img.url:
                    all_images.append({
                        'url': img.url,
                        'is_main': img.is_main
                    })
                    if img.is_main:
                        main_image_url = img.url
                        
            # –ï—Å–ª–∏ –Ω–µ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ
            if main_image_url == "/static/images/default-property.jpg" and all_images:
                main_image_url = all_images[0]['url']
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ID={prop.id}: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category_info = None
        try:
            property_category = db.query(models.PropertyCategory).filter(
                models.PropertyCategory.property_id == prop.id
            ).first()
            
            if property_category:
                category = db.query(models.Category).filter(
                    models.Category.id == property_category.category_id
                ).first()
                if category:
                    category_info = {'name': category.name, 'id': category.id}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ 360¬∞ —Ç—É—Ä–∞
        has_tour = bool(getattr(prop, 'tour_360_url', None) or getattr(prop, 'tour_360_file_id', None))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
        property_data = {
            'id': prop.id,
            'title': prop.title or f"–û–±—ä–µ–∫—Ç ‚Ññ{prop.id}",
            'address': prop.address or "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω",
            'city': prop.city or "–ë–∏—à–∫–µ–∫",
            'description': prop.description or "",
            'price': prop.price or 0,
            'price_formatted': price_formatted,
            'area': prop.area,
            'rooms': prop.rooms,
            'floor': prop.floor,
            'building_floors': prop.building_floors,
            'bathroom_type': getattr(prop, 'bathroom_type', None),
            'type': prop.type or "apartment",
            'status': prop.status,
            'status_display': status_display,
            'views': getattr(prop, 'views', 0),
            'created_at': prop.created_at.isoformat() if prop.created_at else "",
            'owner_name': owner_name,
            'owner_email': owner_email,
            'owner_id': prop.owner_id,
            'image_url': main_image_url,
            'all_images': all_images,
            'category': category_info,
            'has_tour': has_tour,
            # –£–¥–æ–±—Å—Ç–≤–∞
            'has_balcony': getattr(prop, 'has_balcony', False),
            'has_furniture': getattr(prop, 'has_furniture', False),
            'has_renovation': getattr(prop, 'has_renovation', False),
            'has_parking': getattr(prop, 'has_parking', False),
            'has_elevator': getattr(prop, 'has_elevator', False),
            'has_security': getattr(prop, 'has_security', False),
            'has_internet': getattr(prop, 'has_internet', False),
            'has_air_conditioning': getattr(prop, 'has_air_conditioning', False),
            'has_heating': getattr(prop, 'has_heating', False),
            'has_yard': getattr(prop, 'has_yard', False),
            'has_pool': getattr(prop, 'has_pool', False),
            'has_gym': getattr(prop, 'has_gym', False),
        }
        
        properties_formatted.append(property_data)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    start_item = start_idx + 1 if total_properties > 0 else 0
    end_item = min(start_idx + len(properties_formatted), total_properties)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    page_range = range(max(1, page - 2), min(total_pages + 1, page + 3))
    
    return templates.TemplateResponse("admin/properties.html", {
            "request": request,
        "current_admin": user,
        "properties": properties_formatted,
        "categories": categories,
        "status": status,
        "property_type": property_type,
        "search_query": search,
        "total_properties": total_properties,
            "total_pages": total_pages,
            "current_page": page,
            "pages": page_range,
            "start_item": start_item,
        "end_item": end_item
    })

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def check_admin_access(request: Request, db: Session):
    auth_token = request.cookies.get('access_token')
    if not auth_token:
        return RedirectResponse(url="/admin/login", status_code=303)
    
    try:
        payload = pyjwt.decode(auth_token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        if datetime.fromtimestamp(payload["exp"]) < datetime.utcnow():
            return RedirectResponse(url="/admin/login", status_code=303)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if not payload.get("is_admin"):
            return RedirectResponse(url="/admin/login", status_code=303)
            
        user_id = int(payload.get("sub"))
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            return RedirectResponse(url="/admin/login", status_code=303)
            
        return user
    except Exception as e:
        print(f"DEBUG: Token validation error: {str(e)}")
        return RedirectResponse(url="/admin/login", status_code=303)

@app.get("/admin/requests", response_class=HTMLResponse, name="admin_requests")
async def admin_requests(request: Request, tab: str = Query('listings'), status: str = Query(None), 
                    property_type: str = Query(None), search: str = Query(None), 
                    page: int = Query(1, ge=1), db: Session = Depends(deps.get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user = await check_admin_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
    categories = db.query(models.Category).all()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º
    try:
        # –î–ª—è —Ç–∞–±–∞ tours –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Å—ä–µ–º–∫—É 360
        tour_requests_count = db.query(models.Property).filter(
            models.Property.tour_360_url.like('%example.com%')
        ).count()
        
        # –î–ª—è —Ç–∞–±–∞ listings –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PENDING
        listing_requests_count = db.query(models.Property).filter(
            models.Property.status == 'pending'
        ).count()
    except Exception as e:
        print(f"Error counting properties: {e}")
        tour_requests_count = 0
        listing_requests_count = 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ –ë–î
    try:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ properties
        query = db.query(models.Property)\
            .join(models.User, models.Property.owner_id == models.User.id, isouter=True)\
            .options(
                joinedload(models.Property.owner),
                joinedload(models.Property.images)
            )
            
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        if tab == 'tours':
            # –î–ª—è —Ç–∞–±–∞ tours –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–Ω—è—Ç—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Å—ä–µ–º–∫—É 360
            query = query.filter(
                models.Property.tour_360_url.like('%example.com%'),
                models.Property.status.in_(['active', 'processing'])
            )
        elif tab == 'listings':
            # –î–ª—è —Ç–∞–±–∞ listings –±–µ—Ä–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PENDING (–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏)
            query = query.filter(
                models.Property.status == 'pending'
            )
            
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if status:
            if status == 'new':
                query = query.filter(models.Property.status.in_(['new', 'pending']))
            else:
                status_map = {
                    'in_progress': 'processing',
                    'completed': 'active',
                    'rejected': 'rejected'
                }
                if status in status_map:
                    query = query.filter(models.Property.status == status_map[status])
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if property_type:
            try:
                property_type_id = int(property_type)
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–≤—è–∑—å —Å —Ç–∞–±–ª–∏—Ü–µ–π categories)
                query = query.join(models.PropertyCategory).filter(
                    models.PropertyCategory.category_id == property_type_id
                )
            except (ValueError, TypeError):
                # –ï—Å–ª–∏ property_type –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∫–∞–∫ –æ–±—ã—á–Ω–æ
                query = query.filter(models.Property.type == property_type)
        
        # –ü–æ–∏—Å–∫
        if search:
            search_term = f"%{search}%"
            query = query.filter(
                or_(
                    models.Property.title.ilike(search_term),
                    models.Property.description.ilike(search_term),
                    models.Property.address.ilike(search_term),
                    models.User.full_name.ilike(search_term)
                )
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        total_items = query.count()
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        items_per_page = 10
        total_pages = (total_items + items_per_page - 1) // items_per_page if total_items > 0 else 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page > total_pages and total_pages > 0:
            page = total_pages
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        start_idx = (page - 1) * items_per_page
        query = query.order_by(desc(models.Property.created_at)).offset(start_idx).limit(items_per_page)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        properties = query.all()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        requests_data = []
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        status_map_reverse = {
            'new': 'new',
            'pending': 'new',
            'processing': 'in_progress',
            'active': 'completed',
            'rejected': 'rejected',
            'inactive': 'rejected'
        }
        
        for prop in properties:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            if prop.price:
                if prop.price >= 1000000:
                    millions = prop.price / 1000000
                    price_formatted = f"{millions:.1f} –º–ª–Ω KGZ".replace('.0', '')
                else:
                    thousands = prop.price / 1000
                    price_formatted = f"{thousands:.1f} —Ç—ã—Å KGZ".replace('.0', '')
            else:
                price_formatted = "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_status = status_map_reverse.get(prop.status, 'new') if prop.status else 'new'
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            property_images = []
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ SQLAlchemy
                for img in prop.images:
                    if img.url:
                        property_images.append({
                            'url': img.url,
                            'is_main': img.is_main
                        })
                
                # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
                if not property_images:
                    property_images = []
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ID={prop.id}: {e}")
                property_images = []
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
            owner_data = {
                'id': prop.owner.id if prop.owner else None,
                'name': prop.owner.full_name if prop.owner and prop.owner.full_name else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                'email': prop.owner.email if prop.owner and prop.owner.email else ""
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_info = None
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑—å —á–µ—Ä–µ–∑ PropertyCategory
                property_category = db.query(models.PropertyCategory).filter(
                    models.PropertyCategory.property_id == prop.id
                ).first()
                
                if property_category:
                    category = db.query(models.Category).filter(
                        models.Category.id == property_category.category_id
                    ).first()
                    if category:
                        category_info = {'name': category.name, 'id': category.id}
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
                category_info = None
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å–ø–∏—Å–æ–∫
            requests_data.append({
                'id': prop.id,
                'status': display_status,
                'created_at': prop.created_at.isoformat() if prop.created_at else None,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
                'scheduled_date': prop.notes,  # –ë–µ—Ä–µ–º –¥–∞—Ç—É —Å—ä–µ–º–∫–∏ –∏–∑ –ø–æ–ª—è notes
                'property': {
                    'id': prop.id,
                    'title': prop.title or f"–û–±—ä–µ–∫—Ç ‚Ññ{prop.id}",
                    'address': prop.address or "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω",
                    'price': prop.price or 0,
                    'price_formatted': price_formatted,
                    'type': prop.type or "apartment",
                    'images': property_images,  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    'category': category_info  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                },
                'user': owner_data
            })
            
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        start_idx = (page - 1) * items_per_page
        end_idx = min(start_idx + len(requests_data), total_items)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        requests_data = []
        total_items = 0
        total_pages = 1
        start_idx = 0
        end_idx = 0
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    query_params = ""
    if tab:
        query_params += f"&tab={tab}"
    if status:
        query_params += f"&status={status}"
    if property_type:
        query_params += f"&property_type={property_type}"
    if search:
        query_params += f"&search={search}"
        
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    page_range = range(max(1, page - 2), min(total_pages + 1, page + 3))
    
    return templates.TemplateResponse("admin/requests.html", {
        "request": request,
        "current_admin": user,
        "requests": requests_data,
        "tab": tab,
        "status": status,
        "property_type": property_type,
        "search": search,
        "categories": categories,  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        "total_items": total_items,
        "total_pages": total_pages,
        "current_page": page,
        "pages": page_range,
        "start_item": start_idx + 1 if total_items > 0 else 0,
        "end_item": end_idx,
        "listing_requests_count": listing_requests_count,
        "tour_requests_count": tour_requests_count,
        "query_params": query_params
    })

@app.get("/admin/settings", response_class=HTMLResponse, name="admin_settings")
async def admin_settings(request: Request, db: Session = Depends(deps.get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user = await check_admin_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
    
    class DummySettings:
        email_new_properties = False
        email_new_users = False
        push_notifications = False
        digest_frequency = 'never'
        color_scheme = 'orange'
        theme = 'light'
        compact_mode = False
        animations_enabled = True
    
    dummy_settings = DummySettings()
    return templates.TemplateResponse(
        "admin/settings.html",
        {"request": request, "current_admin": user, "settings": dummy_settings}
    )

# API –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
class SettingsModel(BaseModel):
    email_new_properties: Optional[bool] = True
    email_new_users: Optional[bool] = True
    push_notifications: Optional[bool] = False
    digest_frequency: Optional[str] = "daily"
    color_scheme: Optional[str] = "orange"
    theme: Optional[str] = "light"
    compact_mode: Optional[bool] = False
    animations_enabled: Optional[bool] = True

@app.post("/api/v1/settings")
async def save_settings(settings: SettingsModel, request: Request, db: Session = Depends(deps.get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ API –¥–æ–ø—É—Å–∫–∞–µ–º –ª—é–±–æ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    auth_token = request.cookies.get('access_token')
    auth_header = request.headers.get('Authorization')
    
    if auth_header and auth_header.startswith('Bearer '):
        auth_token = auth_header.split(' ')[1]
    
    if not auth_token:
        return JSONResponse(status_code=401, content={"success": False, "error": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"})
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        payload = pyjwt.decode(auth_token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        if datetime.fromtimestamp(payload["exp"]) < datetime.utcnow():
            return JSONResponse(status_code=401, content={"success": False, "error": "–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫"})
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        return {"success": True, "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"}
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
        return JSONResponse(status_code=500, content={"success": False, "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"})

# –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
@app.post("/api/v1/settings/reset")
async def reset_settings(request: Request, db: Session = Depends(deps.get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    auth_token = request.cookies.get('access_token')
    auth_header = request.headers.get('Authorization')
    
    if auth_header and auth_header.startswith('Bearer '):
        auth_token = auth_header.split(' ')[1]
    
    if not auth_token:
        return JSONResponse(status_code=401, content={"success": False, "error": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"})
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        payload = pyjwt.decode(auth_token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        if datetime.fromtimestamp(payload["exp"]) < datetime.utcnow():
            return JSONResponse(status_code=401, content={"success": False, "error": "–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫"})
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã —Å–±—Ä–∞—Å—ã–≤–∞–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        return {"success": True, "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"}
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
        return JSONResponse(status_code=500, content={"success": False, "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"})

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
async def check_superadmin_access(request: Request, db: Session):
    auth_token = request.cookies.get('access_token')
    if not auth_token:
        return RedirectResponse(url="/superadmin/login", status_code=303)
    
    try:
        payload = pyjwt.decode(auth_token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        if datetime.fromtimestamp(payload["exp"]) < datetime.utcnow():
            return RedirectResponse(url="/superadmin/login", status_code=303)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if not payload.get("is_superadmin"):
            return RedirectResponse(url="/superadmin/login", status_code=303)
            
        user_id = int(payload.get("sub"))
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            return RedirectResponse(url="/superadmin/login", status_code=303)
            
        return user
    except Exception as e:
        print(f"DEBUG: SuperAdmin token validation error: {str(e)}")
        return RedirectResponse(url="/superadmin/login", status_code=303)

# ============================ SuperAdmin Routes ============================

@app.get("/superadmin/login")
async def superadmin_login_get(request: Request):
    return templates.TemplateResponse("superadmin/login.html", {"request": request})

@app.post("/superadmin/login")
async def superadmin_login_post(
    request: Request,
    username: str = Form(...),
    password: str = Form(...),
    db: Session = Depends(deps.get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    superadmin = db.query(models.User).filter(
        models.User.email == username,
        models.User.role == models.UserRole.ADMIN  # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–ª—å ADMIN
    ).first()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ email –º–æ–≥—É—Ç –±—ã—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞–º–∏
    superadmin_emails = ['superadmin@wazir.kg', 'admin@wazir.kg']
    
    if not superadmin or not verify_password(password, superadmin.hashed_password) or username not in superadmin_emails:
        return templates.TemplateResponse(
            "superadmin/login.html",
            {"request": request, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞"}
        )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ —Å —Ñ–ª–∞–≥–æ–º is_superadmin
    access_token = create_access_token(
        data={"sub": str(superadmin.id), "is_admin": True, "is_superadmin": True}
    )
    
    response = RedirectResponse(url="/superadmin/dashboard", status_code=303)
    response.set_cookie(
        key="access_token",
        value=access_token,
        httponly=False,
        max_age=3600 * 24,
        samesite="lax",
        path="/"
    )
    
    return response

@app.get("/superadmin/logout")
async def superadmin_logout():
    response = RedirectResponse(url="/superadmin/login", status_code=303)
    response.delete_cookie("access_token", path="/")
    return response

@app.get("/superadmin", response_class=HTMLResponse)
@app.get("/superadmin/dashboard", response_class=HTMLResponse)
async def superadmin_dashboard(request: Request, db: Session = Depends(deps.get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    user = await check_superadmin_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    from datetime import datetime, timedelta
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        'admins_count': db.query(models.User).filter(models.User.role == models.UserRole.ADMIN).count(),
        'users_count': db.query(models.User).filter(models.User.role == models.UserRole.USER).count(),
        'properties_count': db.query(models.Property).count(),
        'pending_requests': db.query(models.Property).filter(models.Property.status == 'PENDING').count()
    }
    
    # –†–ï–ê–õ–¨–ù–´–ï –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –ë–î
    recent_activities = []
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    week_ago = datetime.now() - timedelta(days=7)
    recent_users = db.query(models.User).filter(
        models.User.role == models.UserRole.USER,
        models.User.created_at >= week_ago
    ).order_by(desc(models.User.created_at)).limit(3).all()
    
    for user_item in recent_users:
        time_diff = datetime.now() - user_item.created_at
        if time_diff.days > 0:
            time_str = f"{time_diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
        elif time_diff.seconds > 3600:
            time_str = f"{time_diff.seconds // 3600} —á. –Ω–∞–∑–∞–¥"
        else:
            time_str = f"{time_diff.seconds // 60} –º–∏–Ω. –Ω–∞–∑–∞–¥"
            
        recent_activities.append({
            'icon': 'fas fa-user-plus',
            'action': f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_item.full_name or user_item.email}',
            'admin_name': '–°–∏—Å—Ç–µ–º–∞',
            'time': time_str
        })
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è)
    three_days_ago = datetime.now() - timedelta(days=3)
    recent_properties = db.query(models.Property).filter(
        models.Property.created_at >= three_days_ago
    ).order_by(desc(models.Property.created_at)).limit(2).all()
    
    for prop in recent_properties:
        time_diff = datetime.now() - prop.created_at
        if time_diff.days > 0:
            time_str = f"{time_diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
        elif time_diff.seconds > 3600:
            time_str = f"{time_diff.seconds // 3600} —á. –Ω–∞–∑–∞–¥"
        else:
            time_str = f"{time_diff.seconds // 60} –º–∏–Ω. –Ω–∞–∑–∞–¥"
            
        recent_activities.append({
            'icon': 'fas fa-building',
            'action': f'–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {prop.title or f"–û–±—ä–µ–∫—Ç #{prop.id}"}',
            'admin_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'time': time_str
        })
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    recent_status_changes = db.query(models.Property).filter(
        models.Property.updated_at >= three_days_ago,
        models.Property.status.in_(['ACTIVE', 'REJECTED'])
    ).order_by(desc(models.Property.updated_at)).limit(2).all()
    
    for prop in recent_status_changes:
        time_diff = datetime.now() - prop.updated_at
        if time_diff.days > 0:
            time_str = f"{time_diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
        elif time_diff.seconds > 3600:
            time_str = f"{time_diff.seconds // 3600} —á. –Ω–∞–∑–∞–¥"
        else:
            time_str = f"{time_diff.seconds // 60} –º–∏–Ω. –Ω–∞–∑–∞–¥"
            
        status_text = "–æ–¥–æ–±—Ä–µ–Ω–æ" if prop.status == 'ACTIVE' else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        recent_activities.append({
            'icon': 'fas fa-edit',
            'action': f'–û–±—ä—è–≤–ª–µ–Ω–∏–µ {status_text}: {prop.title or f"#{prop.id}"}',
            'admin_name': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
            'time': time_str
        })
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not recent_activities:
        recent_activities.append({
            'icon': 'fas fa-info-circle',
            'action': '–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ',
            'admin_name': '–°–∏—Å—Ç–µ–º–∞',
            'time': '–°–µ–π—á–∞—Å'
        })
    
    # –†–ï–ê–õ–¨–ù–´–ï —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    system_notifications = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    pending_count = db.query(models.Property).filter(models.Property.status == 'PENDING').count()
    if pending_count > 0:
        system_notifications.append({
            'icon': 'fas fa-exclamation-triangle',
            'title': '–¢—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ü–∏—è',
            'message': f'{pending_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
            'color': '#f59e0b',
            'bg_color': '#fefbf3',
            'time': '–°–µ–π—á–∞—Å'
        })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    yesterday = datetime.now() - timedelta(days=1)
    new_users_count = db.query(models.User).filter(
        models.User.created_at >= yesterday,
        models.User.role == models.UserRole.USER
    ).count()
    
    if new_users_count > 0:
        system_notifications.append({
            'icon': 'fas fa-users',
            'title': '–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            'message': f'{new_users_count} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞',
            'color': '#10b981',
            'bg_color': '#f0fdf4',
            'time': '24 —á–∞—Å–∞'
        })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    inactive_admins = db.query(models.User).filter(
        models.User.role == models.UserRole.ADMIN,
        models.User.is_active == False
    ).count()
    
    if inactive_admins > 0:
        system_notifications.append({
            'icon': 'fas fa-user-slash',
            'title': '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã',
            'message': f'{inactive_admins} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã',
            'color': '#ef4444',
            'bg_color': '#fef2f2',
            'time': '1 —á–∞—Å –Ω–∞–∑–∞–¥'
        })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    active_properties = db.query(models.Property).filter(models.Property.status == 'ACTIVE').count()
    if active_properties > 100:
        system_notifications.append({
            'icon': 'fas fa-chart-line',
            'title': '–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
            'message': f'{active_properties} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ',
            'color': '#10b981',
            'bg_color': '#f0fdf4',
            'time': '–°–µ–π—á–∞—Å'
        })
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not system_notifications:
        system_notifications.append({
            'icon': 'fas fa-check-circle',
            'title': '–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ',
            'message': '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ, –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ',
            'color': '#10b981',
            'bg_color': '#f0fdf4',
            'time': '–°–µ–π—á–∞—Å'
        })
    
    # –†–ï–ê–õ–¨–ù–ê–Ø —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    system_info = {
        'python_version': f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
        'fastapi_version': '0.104.1',
        'memory_usage': f"{psutil.virtual_memory().percent:.1f}%" if psutil else "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
        'uptime': 'Online'
    }
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    if psutil:
        try:
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            memory = psutil.virtual_memory()
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
            disk = psutil.disk_usage('/')
            
            system_info.update({
                'cpu_usage': f"{cpu_percent:.1f}%",
                'memory_usage': f"{memory.percent:.1f}%",
                'memory_total': f"{memory.total // (1024**3)} GB",
                'disk_usage': f"{disk.percent:.1f}%",
                'disk_free': f"{disk.free // (1024**3)} GB"
            })
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    
    return templates.TemplateResponse(
        "superadmin/dashboard.html",
        {
            "request": request,
            "current_user": user,
            "stats": stats,
            "recent_activities": recent_activities,
            "system_notifications": system_notifications,
            "system_info": system_info
        }
    )

@app.get("/superadmin/admins", response_class=HTMLResponse)
async def superadmin_admins(request: Request, db: Session = Depends(deps.get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    user = await check_superadmin_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (ADMIN –∏ MANAGER —Ä–æ–ª–∏)
    admins = db.query(models.User).filter(
        or_(
            models.User.role == models.UserRole.ADMIN,
            models.User.role == models.UserRole.MANAGER
        )
    ).all()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    admins_total = len(admins)
    admins_active = len([admin for admin in admins if admin.is_active])
    admins_inactive = admins_total - admins_active
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    enhanced_admins = []
    for admin in admins:
        enhanced_admins.append({
            "id": admin.id,
            "full_name": admin.full_name,
            "email": admin.email,
            "phone": admin.phone,
            "is_active": admin.is_active,
            "avatar_url": getattr(admin, 'avatar_url', None),
            "created_at": admin.created_at.isoformat() if admin.created_at else None,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–¥–∞–∂–µ –µ—Å–ª–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞)
    total_pages = 1
    current_page = 1
    per_page = len(enhanced_admins)
    total_items = len(enhanced_admins)
    
    return templates.TemplateResponse(
        "superadmin/admins.html",
        {
            "request": request,
            "current_user": user,
            "admins": enhanced_admins,
            "admins_total": admins_total,
            "admins_active": admins_active,
            "admins_inactive": admins_inactive,
            "total_pages": total_pages,
            "current_page": current_page,
            "per_page": per_page,
            "total_items": total_items
        }
    )

@app.get("/superadmin/users", response_class=HTMLResponse)
async def superadmin_users(
    request: Request, 
    search: str = Query(None),
    status: str = Query(None),
    property_filter: str = Query(None),
    page: int = Query(1, ge=1),
    db: Session = Depends(deps.get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    user = await check_superadmin_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
    
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    query = db.query(models.User).filter(models.User.role == models.UserRole.USER)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if search:
        search_term = f"%{search}%"
        query = query.filter(
            or_(
                models.User.full_name.ilike(search_term),
                models.User.email.ilike(search_term),
                models.User.phone.ilike(search_term)
            )
        )
    
    if status:
        if status == "active":
            query = query.filter(models.User.is_active == True)
        elif status == "blocked":
            query = query.filter(models.User.is_active == False)
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_items = query.count()
    items_per_page = 50
    total_pages = (total_items + items_per_page - 1) // items_per_page if total_items > 0 else 1
    
    if page > total_pages and total_pages > 0:
        page = total_pages
    
    start_idx = (page - 1) * items_per_page
    users_results = query.order_by(desc(models.User.created_at)).offset(start_idx).limit(items_per_page).all()
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    enhanced_users = []
    for u in users_results:
        properties_count = db.query(models.Property).filter(models.Property.owner_id == u.id).count()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if property_filter:
            if property_filter == "with" and properties_count == 0:
                continue
            elif property_filter == "without" and properties_count > 0:
                continue
        
        enhanced_users.append({
            "id": u.id,
            "full_name": u.full_name or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {u.id}",
            "phone": u.phone or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            "email": u.email or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            "is_active": u.is_active,
            "properties_count": properties_count,
            "registered_at": u.created_at.isoformat() if u.created_at else None,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
        })
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    query_params = ""
    if search:
        query_params += f"&search={search}"
    if status:
        query_params += f"&status={status}"
    if property_filter:
        query_params += f"&property_filter={property_filter}"
    
    start_item = start_idx + 1 if len(enhanced_users) > 0 else 0
    end_item = start_idx + len(enhanced_users)
    page_range = range(max(1, page - 2), min(total_pages + 1, page + 3))
    
    return templates.TemplateResponse(
        "superadmin/users.html",
        {
            "request": request,
            "current_user": user,
            "users": enhanced_users,
            "total_items": total_items,
            "items_per_page": items_per_page,
            "current_page": page,
            "total_pages": total_pages,
            "start_item": start_item,
            "end_item": end_item,
            "page_range": page_range,
            "query_params": query_params,
            "search": search or "",
            "status": status or "",
            "property_filter": property_filter or ""
        }
    )

@app.get("/superadmin/companies", response_class=HTMLResponse)
async def superadmin_companies(
    request: Request, 
    search: str = Query(None),
    status: str = Query(None),
    page: int = Query(1, ge=1),
    db: Session = Depends(deps.get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    user = await check_superadmin_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
    
    from sqlalchemy.orm import joinedload
    from sqlalchemy import or_
    
    items_per_page = 20
    offset = (page - 1) * items_per_page
    
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—å—é COMPANY)
    query = db.query(models.User).filter(models.User.role == models.UserRole.COMPANY)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if search:
        search_term = f"%{search}%"
        query = query.filter(
            or_(
                models.User.full_name.ilike(search_term),
                models.User.email.ilike(search_term),
                models.User.phone.ilike(search_term),
                models.User.company_name.ilike(search_term),
                models.User.company_number.ilike(search_term),
                models.User.company_owner.ilike(search_term)
            )
        )
    
    if status:
        if status == "active":
            query = query.filter(models.User.is_active == True)
        elif status == "blocked":
            query = query.filter(models.User.is_active == False)
    
    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    total_items = query.count()
    total_pages = (total_items + items_per_page - 1) // items_per_page
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    companies_results = query.offset(offset).limit(items_per_page).all()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    enhanced_companies = []
    total_company_properties = 0
    
    for company in companies_results:
        properties_count = db.query(models.Property).filter(models.Property.owner_id == company.id).count()
        total_company_properties += properties_count
        
        enhanced_companies.append({
            "id": company.id,
            "company_name": company.company_name,
            "company_number": company.company_number,
            "company_owner": company.company_owner,
            "company_logo_url": company.company_logo_url,
            "company_description": company.company_description,
            "company_address": company.company_address,
            "full_name": company.full_name,
            "email": company.email,
            "phone": company.phone,
            "is_active": company.is_active,
            "properties_count": properties_count,
            "created_at": company.created_at.isoformat() if company.created_at else None,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
        })
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    companies_total = query.count()
    companies_active = query.filter(models.User.is_active == True).count()
    companies_inactive = companies_total - companies_active
    
    return templates.TemplateResponse(
        "superadmin/companies.html",
        {
            "request": request,
            "current_user": user,
            "companies": enhanced_companies,
            "companies_total": companies_total,
            "companies_active": companies_active,
            "companies_inactive": companies_inactive,
            "total_company_properties": total_company_properties,
            "search": search or "",
            "status": status or "",
            "current_page": page,
            "total_pages": total_pages,
        }
    )

@app.get("/superadmin/properties", response_class=HTMLResponse)
async def superadmin_properties(
    request: Request, 
    search: str = Query(None),
    status: str = Query(None),
    property_type: str = Query(None),
    page: int = Query(1, ge=1),
    db: Session = Depends(deps.get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    user = await check_superadmin_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
    
    from sqlalchemy.orm import joinedload
    from sqlalchemy import or_, desc
    
    items_per_page = 20
    offset = (page - 1) * items_per_page
    
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    query = db.query(models.Property).options(joinedload(models.Property.owner))
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if search:
        search_term = f"%{search}%"
        query = query.filter(
            or_(
                models.Property.title.ilike(search_term),
                models.Property.address.ilike(search_term),
                models.Property.description.ilike(search_term)
            )
        )
    
    if status:
        if status == "active":
            query = query.filter(models.Property.status == 'ACTIVE')
        elif status == "pending":
            query = query.filter(models.Property.status == 'PENDING')
        elif status == "rejected":
            query = query.filter(models.Property.status == 'REJECTED')
        elif status == "draft":
            query = query.filter(models.Property.status == 'DRAFT')
    
    if property_type:
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ - –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        pass
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    query = query.order_by(desc(models.Property.created_at))
    
    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    total_items = query.count()
    total_pages = (total_items + items_per_page - 1) // items_per_page
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    properties_results = query.offset(offset).limit(items_per_page).all()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    enhanced_properties = []
    
    for prop in properties_results:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
        price_formatted = f"{int(prop.price):,} —Å–æ–º".replace(",", " ") if prop.price else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        owner_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        if prop.owner:
            if prop.owner.role == models.UserRole.COMPANY:
                owner_name = prop.owner.company_name or prop.owner.full_name or prop.owner.email
            else:
                owner_name = prop.owner.full_name or prop.owner.email
        
        # URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        image_url = "/static/img/property-placeholder.jpg"  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if hasattr(prop, 'images') and prop.images:
            # prop.images - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ PropertyImage, –ø–æ–ª—É—á–∞–µ–º URL –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            first_image = prop.images[0]
            if hasattr(first_image, 'url'):
                image_url = first_image.url
        
        enhanced_properties.append({
            "id": prop.id,
            "title": prop.title or f"–û–±—ä–µ–∫—Ç #{prop.id}",
            "address": prop.address or "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω",
            "price": prop.price or 0,
            "price_formatted": price_formatted,
            "rooms": prop.rooms,
            "area": prop.area,
            "status": prop.status.value.lower() if prop.status else "draft",
            "status_display": {
                "active": "–ê–∫—Ç–∏–≤–Ω–æ",
                "pending": "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", 
                "rejected": "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
                "draft": "–ß–µ—Ä–Ω–æ–≤–∏–∫"
            }.get(prop.status.value.lower() if prop.status else "draft", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "owner_id": prop.owner_id,
            "owner_name": owner_name,
            "image_url": image_url,
            "created_at": prop.created_at.isoformat() if prop.created_at else None,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
        })
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_properties = db.query(models.Property).count()
    active_count = db.query(models.Property).filter(models.Property.status == 'ACTIVE').count()
    pending_count = db.query(models.Property).filter(models.Property.status == 'PENDING').count()
    rejected_count = db.query(models.Property).filter(models.Property.status == 'REJECTED').count()
    
    return templates.TemplateResponse(
        "superadmin/properties.html",
        {
            "request": request,
            "current_user": user,
            "properties": enhanced_properties,
            "total_properties": total_properties,
            "active_count": active_count,
            "pending_count": pending_count,
            "rejected_count": rejected_count,
            "search": search or "",
            "status": status or "",
            "property_type": property_type or "",
            "current_page": page,
            "total_pages": total_pages,
        }
    )

@app.get("/superadmin/logs", response_class=HTMLResponse)
async def superadmin_logs(request: Request, db: Session = Depends(deps.get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    user = await check_superadmin_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
    
    return templates.TemplateResponse(
        "superadmin/logs.html",
        {
            "request": request,
            "current_user": user,
        }
    )

@app.get("/superadmin/analytics", response_class=HTMLResponse)
async def superadmin_analytics(request: Request, db: Session = Depends(deps.get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    user = await check_superadmin_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
    
    from datetime import datetime, timedelta
    from sqlalchemy import func, extract
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    total_users = db.query(models.User).filter(models.User.role == models.UserRole.USER).count()
    active_users = db.query(models.User).filter(
        models.User.role == models.UserRole.USER,
        models.User.is_active == True
    ).count()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    total_properties = db.query(models.Property).count()
    active_properties = db.query(models.Property).filter(models.Property.status == 'ACTIVE').count()
    pending_properties = db.query(models.Property).filter(models.Property.status == 'PENDING').count()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    end_date = datetime.now()
    start_date = end_date - timedelta(days=30)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º
    users_by_date = db.query(
        func.date(models.User.created_at).label('date'),
        func.count(models.User.id).label('count')
    ).filter(
        models.User.created_at >= start_date,
        models.User.role == models.UserRole.USER
    ).group_by(
        func.date(models.User.created_at)
    ).order_by('date').all()
    
    # –û–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –¥–Ω—è–º
    properties_by_date = db.query(
        func.date(models.Property.created_at).label('date'),
        func.count(models.Property.id).label('count')
    ).filter(
        models.Property.created_at >= start_date
    ).group_by(
        func.date(models.Property.created_at)
    ).order_by('date').all()
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    try:
        popular_categories = db.query(
            models.Category.name.label('category'),
            func.count(models.PropertyCategory.property_id).label('count')
        ).join(
            models.PropertyCategory, models.Category.id == models.PropertyCategory.category_id
        ).group_by(
            models.Category.id, models.Category.name
        ).order_by(
            func.count(models.PropertyCategory.property_id).desc()
        ).limit(10).all()
    except:
        popular_categories = []
    
    # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    try:
        price_by_category = db.query(
            models.Category.name.label('category'),
            func.avg(models.Property.price).label('avg_price')
        ).join(
            models.PropertyCategory, models.Category.id == models.PropertyCategory.category_id
        ).join(
            models.Property, models.PropertyCategory.property_id == models.Property.id
        ).filter(
            models.Property.price.isnot(None),
            models.Property.price > 0
        ).group_by(
            models.Category.id, models.Category.name
        ).order_by('avg_price').all()
    except:
        price_by_category = []
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    monthly_stats = db.query(
        extract('month', models.Property.created_at).label('month'),
        func.count(models.Property.id).label('count')
    ).filter(
        models.Property.created_at >= datetime.now().replace(month=1, day=1)
    ).group_by(
        extract('month', models.Property.created_at)
    ).order_by('month').all()
    
    # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    top_users = db.query(
        models.User.id,
        models.User.full_name,
        models.User.email,
        func.count(models.Property.id).label('properties_count')
    ).join(
        models.Property, models.User.id == models.Property.owner_id
    ).filter(
        models.User.role == models.UserRole.USER
    ).group_by(
        models.User.id, models.User.full_name, models.User.email
    ).order_by(
        func.count(models.Property.id).desc()
    ).limit(10).all()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    users_chart_data = {
        'labels': [item.date.strftime('%d.%m') for item in users_by_date[-14:]] or [],
        'data': [item.count for item in users_by_date[-14:]] or []
    }
    
    properties_chart_data = {
        'labels': [item.date.strftime('%d.%m') for item in properties_by_date[-14:]] or [],
        'data': [item.count for item in properties_by_date[-14:]] or []
    }
    
    categories_chart_data = {
        'labels': [item.category for item in popular_categories[:6]] or ['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'],
        'data': [item.count for item in popular_categories[:6]] or [0]
    }
    
    price_chart_data = {
        'labels': [item.category for item in price_by_category[:6]] or ['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'],
        'data': [float(item.avg_price) if item.avg_price else 0 for item in price_by_category[:6]] or [0]
    }
    
    # –ú–µ—Å—è—Ü—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    month_names = {
        1: '–Ø–Ω–≤', 2: '–§–µ–≤', 3: '–ú–∞—Ä', 4: '–ê–ø—Ä', 5: '–ú–∞–π', 6: '–ò—é–Ω',
        7: '–ò—é–ª', 8: '–ê–≤–≥', 9: '–°–µ–Ω', 10: '–û–∫—Ç', 11: '–ù–æ—è', 12: '–î–µ–∫'
    }
    
    monthly_chart_data = {
        'labels': [month_names.get(int(item.month), f'–ú–µ—Å—è—Ü {item.month}') for item in monthly_stats] or ['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'],
        'data': [item.count for item in monthly_stats] or [0]
    }
    
    return templates.TemplateResponse(
        "superadmin/analytics.html",
        {
            "request": request,
            "current_user": user,
            "total_users": total_users,
            "active_users": active_users,
            "total_properties": total_properties,
            "active_properties": active_properties,
            "pending_properties": pending_properties,
            "users_chart_data": users_chart_data,
            "properties_chart_data": properties_chart_data,
            "categories_chart_data": categories_chart_data,
            "price_chart_data": price_chart_data,
            "monthly_chart_data": monthly_chart_data,
            "top_users": top_users,
            "popular_categories": popular_categories
        }
    )

@app.get("/superadmin/settings", response_class=HTMLResponse)
async def superadmin_settings(request: Request, db: Session = Depends(deps.get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    user = await check_superadmin_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
    
    return templates.TemplateResponse("superadmin/settings.html", {
        "request": request,
        "current_user": user
    })

# API —Ä–æ—É—Ç—ã –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

@app.post("/api/v1/superadmin/admins")
async def create_admin(
    request: Request,
    full_name: str = Form(...),
    email: str = Form(...),
    phone: str = Form(None),
    password: str = Form(...),
    db: Session = Depends(deps.get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    user = await check_superadmin_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email
        existing_email = db.query(models.User).filter(models.User.email == email).first()
        if existing_email:
            return JSONResponse(status_code=400, content={"success": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        if phone:
            existing_phone = db.query(models.User).filter(models.User.phone == phone).first()
            if existing_phone:
                return JSONResponse(status_code=400, content={"success": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
        
        # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        hashed_password = pwd_context.hash(password)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        new_admin = models.User(
            email=email,
            full_name=full_name,
            phone=phone,
            hashed_password=hashed_password,
            role=models.UserRole.ADMIN,
            is_active=True
        )
        
        db.add(new_admin)
        db.commit()
        db.refresh(new_admin)
        
        print(f"DEBUG: –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {email}")
        return JSONResponse(content={"success": True, "message": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"})
        
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        db.rollback()
        return JSONResponse(status_code=500, content={"success": False, "message": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {str(e)}"})

@app.get("/api/v1/superadmin/admins/{admin_id}")
async def get_admin(
    admin_id: int,
    request: Request,
    db: Session = Depends(deps.get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    user = await check_superadmin_access(request, db)
    if isinstance(user, RedirectResponse):
        return JSONResponse(status_code=401, content={"success": False, "message": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
    
    admin = db.query(models.User).filter(
        models.User.id == admin_id,
        models.User.role == models.UserRole.ADMIN
    ).first()
    
    if not admin:
        return JSONResponse(status_code=404, content={"success": False, "message": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"})
    
    return JSONResponse(content={
        "success": True,
        "admin": {
            "id": admin.id,
            "full_name": admin.full_name,
            "email": admin.email,
            "phone": admin.phone,
            "is_active": admin.is_active
        }
    })

@app.put("/api/v1/superadmin/admins/{admin_id}")
async def update_admin(
    admin_id: int,
    request: Request,
    full_name: str = Form(...),
    email: str = Form(...),
    phone: str = Form(None),
    is_active: str = Form(...),
    db: Session = Depends(deps.get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    user = await check_superadmin_access(request, db)
    if isinstance(user, RedirectResponse):
        return JSONResponse(status_code=401, content={"success": False, "message": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
    
    try:
        admin = db.query(models.User).filter(
            models.User.id == admin_id,
            models.User.role == models.UserRole.ADMIN
        ).first()
        
        if not admin:
            return JSONResponse(status_code=404, content={"success": False, "message": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        admin.full_name = full_name
        admin.email = email
        admin.phone = phone
        admin.is_active = is_active.lower() == 'true'
        
        db.commit()
        
        return JSONResponse(content={"success": True, "message": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"})
        
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        db.rollback()
        return JSONResponse(status_code=500, content={"success": False, "message": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}"})

@app.delete("/api/v1/superadmin/admins/{admin_id}")
async def delete_admin(
    admin_id: int,
    request: Request,
    db: Session = Depends(deps.get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    user = await check_superadmin_access(request, db)
    if isinstance(user, RedirectResponse):
        return JSONResponse(status_code=401, content={"success": False, "message": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∞–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è
        if admin_id == user.id:
            return JSONResponse(content={"success": False, "message": "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è"})
        
        admin = db.query(models.User).filter(
            models.User.id == admin_id,
            models.User.role == models.UserRole.ADMIN
        ).first()
        
        if not admin:
            return JSONResponse(status_code=404, content={"success": False, "message": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"})
        
        db.delete(admin)
        db.commit()
        
        return JSONResponse(content={"success": True, "message": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"})
        
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        db.rollback()
        return JSONResponse(status_code=500, content={"success": False, "message": f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}"})

@app.get("/api/v1/superadmin/stats")
async def get_superadmin_stats(request: Request, db: Session = Depends(deps.get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    user = await check_superadmin_access(request, db)
    if isinstance(user, RedirectResponse):
        return JSONResponse(status_code=401, content={"success": False, "message": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
    
    try:
        stats = {
            'admins_count': db.query(models.User).filter(models.User.role == models.UserRole.ADMIN).count(),
            'users_count': db.query(models.User).count(),
            'properties_count': db.query(models.Property).count(),
            'pending_requests': db.query(models.Property).filter(models.Property.status == 'PENDING').count()
        }
        
        return JSONResponse(content={"success": True, "stats": stats})
        
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return JSONResponse(status_code=500, content={"success": False, "message": f"–û—à–∏–±–∫–∞: {str(e)}"})

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ API —Ä–æ—É—Ç—ã –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞

@app.get("/api/v1/superadmin/users/{user_id}")
async def get_superadmin_user(
    user_id: int,
    request: Request,
    db: Session = Depends(deps.get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    user = await check_superadmin_access(request, db)
    if isinstance(user, RedirectResponse):
        return JSONResponse(status_code=401, content={"success": False, "message": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
    
    target_user = db.query(models.User).filter(models.User.id == user_id).first()
    
    if not target_user:
        return JSONResponse(status_code=404, content={"success": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    properties = db.query(models.Property).filter(models.Property.owner_id == user_id).all()
    properties_data = [{
        "id": prop.id,
        "title": prop.title,
        "address": prop.address,
        "price": prop.price
    } for prop in properties]
    
    return JSONResponse(content={
        "success": True,
        "user": {
            "id": target_user.id,
            "full_name": target_user.full_name,
            "email": target_user.email,
            "phone": target_user.phone,
            "is_active": target_user.is_active,
            "properties_count": len(properties_data),
            "registered_at": target_user.created_at.isoformat() if target_user.created_at else None,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
            "properties": properties_data
        }
    })

@app.delete("/api/v1/superadmin/users/{user_id}/properties")
async def delete_user_properties(
    user_id: int,
    request: Request,
    db: Session = Depends(deps.get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    user = await check_superadmin_access(request, db)
    if isinstance(user, RedirectResponse):
        return JSONResponse(status_code=401, content={"success": False, "message": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        properties = db.query(models.Property).filter(models.Property.owner_id == user_id).all()
        
        if not properties:
            return JSONResponse(content={"success": False, "message": "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π"})
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        for prop in properties:
            db.delete(prop)
        
        db.commit()
        
        return JSONResponse(content={"success": True, "message": f"–£–¥–∞–ª–µ–Ω–æ {len(properties)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π"})
        
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        db.rollback()
        return JSONResponse(status_code=500, content={"success": False, "message": f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}"})

@app.post("/api/v1/superadmin/users/{user_id}/toggle-status")
async def toggle_user_status(
    user_id: int,
    request: Request,
    db: Session = Depends(deps.get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    user = await check_superadmin_access(request, db)
    if isinstance(user, RedirectResponse):
        return JSONResponse(status_code=401, content={"success": False, "message": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
    
    try:
        target_user = db.query(models.User).filter(models.User.id == user_id).first()
        
        if not target_user:
            return JSONResponse(status_code=404, content={"success": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        target_user.is_active = not target_user.is_active
        db.commit()
        
        status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if target_user.is_active else "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        return JSONResponse(content={"success": True, "message": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {status_text}"})
        
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        db.rollback()
        return JSONResponse(status_code=500, content={"success": False, "message": f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"})

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ API —Ä–æ—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏

@app.get("/api/v1/superadmin/properties/{property_id}")
async def get_superadmin_property(
    property_id: int,
    request: Request,
    db: Session = Depends(deps.get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    user = await check_superadmin_access(request, db)
    if isinstance(user, RedirectResponse):
        return JSONResponse(status_code=401, content={"success": False, "message": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
    
    property_item = db.query(models.Property).filter(models.Property.id == property_id).first()
    
    if not property_item:
        return JSONResponse(status_code=404, content={"success": False, "message": "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"})
    
    return JSONResponse(content={
        "success": True,
        "property": {
            "id": property_item.id,
            "title": property_item.title,
            "price": property_item.price,
            "address": property_item.address,
            "status": property_item.status.value if property_item.status else "draft",
            "rooms": property_item.rooms,
            "area": property_item.area
        }
    })

@app.put("/api/v1/superadmin/properties/{property_id}")
async def update_superadmin_property(
    property_id: int,
    request: Request,
    title: str = Form(...),
    price: float = Form(...),
    address: str = Form(...),
    status: str = Form(...),
    rooms: int = Form(None),
    area: float = Form(None),
    db: Session = Depends(deps.get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    user = await check_superadmin_access(request, db)
    if isinstance(user, RedirectResponse):
        return JSONResponse(status_code=401, content={"success": False, "message": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
    
    try:
        property_item = db.query(models.Property).filter(models.Property.id == property_id).first()
        
        if not property_item:
            return JSONResponse(status_code=404, content={"success": False, "message": "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        property_item.title = title
        property_item.price = price
        property_item.address = address
        property_item.status = status
        if rooms is not None:
            property_item.rooms = rooms
        if area is not None:
            property_item.area = area
        
        db.commit()
        
        return JSONResponse(content={"success": True, "message": "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"})
        
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
        db.rollback()
        return JSONResponse(status_code=500, content={"success": False, "message": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}"})

# ============================ Admin Services Routes ============================

@app.get("/admin/services", response_class=HTMLResponse, name="admin_services")
async def admin_services(request: Request, db: Session = Depends(deps.get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user = await check_admin_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –∫–∞—Ä—Ç–æ—á–µ–∫
    try:
        categories_raw = db.query(ServiceCategory).all()
        categories = []
        
        for cat in categories_raw:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            try:
                cards_count = db.query(ServiceCard).filter(ServiceCard.category_id == cat.id).count()
            except:
                cards_count = 0
                
            categories.append({
                'id': cat.id,
                'title': cat.title,
                'slug': cat.slug,
                'is_active': cat.is_active,
                'created_at': cat.created_at,
                'cards_count': cards_count
            })
            
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = [
            {
                'id': 1,
                'title': '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã',
                'slug': 'restaurants',
                'is_active': True,
                'created_at': None,
                'cards_count': 0
            },
            {
                'id': 2,
                'title': '–ö–∞—Ñ–µ',
                'slug': 'cafes',
                'is_active': True,
                'created_at': None,
                'cards_count': 0
            }
        ]
    
    return templates.TemplateResponse("admin/services.html", {
        "request": request,
        "current_admin": user,
        "categories": categories
    })

@app.get("/admin/services/categories/{category_id}/cards", response_class=HTMLResponse, name="admin_service_cards")
async def admin_service_cards(request: Request, category_id: int, db: Session = Depends(deps.get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user = await check_admin_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    try:
        category = db.query(ServiceCategory).filter(ServiceCategory.id == category_id).first()
        if not category:
            raise HTTPException(status_code=404, detail="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã, —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        category = type('Category', (), {
            'id': category_id,
            'title': f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_id}',
            'slug': f'category-{category_id}',
            'is_active': True
        })()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò
    try:
        from sqlalchemy.orm import joinedload
        service_cards_raw = db.query(ServiceCard).options(
            joinedload(ServiceCard.images)
        ).filter(ServiceCard.category_id == category_id).all()
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        service_cards_raw = []
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    service_cards = []
    for card in service_cards_raw:
        service_cards.append({
            "id": card.id,
            "title": card.title,
            "description": card.description,
            "address": card.address,
            "phone": card.phone,
            "email": card.email,
            "website": card.website,
            "image_url": card.image_url,
            "is_active": card.is_active,
            "images": [{"url": img.url, "is_main": img.is_main} for img in card.images],  # –ó–ê–ì–†–£–ñ–ê–ï–ú –†–ï–ê–õ–¨–ù–´–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
            "has_360_tour": card.has_360_tour(),  # –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê–õ–ò–ß–ò–ï 360¬∞ –¢–£–†–ê
            "created_at": card.created_at,
            "photos_count": len(card.images)  # –î–û–ë–ê–í–õ–Ø–ï–ú –ö–û–õ–ò–ß–ï–°–¢–í–û –§–û–¢–û–ì–†–ê–§–ò–ô
        })
    
    return templates.TemplateResponse("admin/service_cards.html", {
        "request": request,
        "current_admin": user,
        "category": category,
        "service_cards": service_cards
    })

# API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
@app.post("/api/v1/admin/service-categories")
async def create_service_category(
    request: Request,
    title: str = Form(...),
    db: Session = Depends(deps.get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user = await check_admin_access(request, db)
    if isinstance(user, RedirectResponse):
        return JSONResponse(status_code=403, content={"success": False, "error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
    
    try:
        # –°–æ–∑–¥–∞–µ–º slug –∏–∑ title
        slug = title.lower().replace(' ', '-').replace('—å', '').replace('—ä', '')
        # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—É
        slug_mapping = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
            '—ã': 'y', '—ç': 'e', '—é': 'yu', '—è': 'ya'
        }
        
        for cyrillic, latin in slug_mapping.items():
            slug = slug.replace(cyrillic, latin)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug
        existing = db.query(ServiceCategory).filter(ServiceCategory.slug == slug).first()
        counter = 1
        original_slug = slug
        while existing:
            slug = f"{original_slug}-{counter}"
            existing = db.query(ServiceCategory).filter(ServiceCategory.slug == slug).first()
            counter += 1
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = ServiceCategory(
            title=title,
            slug=slug,
            is_active=True
        )
        
        db.add(category)
        db.commit()
        db.refresh(category)
        
        return {"success": True, "message": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ", "category": {
            "id": category.id,
            "title": category.title,
            "slug": category.slug,
            "is_active": category.is_active
        }}
        
    except Exception as e:
        db.rollback()
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")
        return JSONResponse(status_code=500, content={"success": False, "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"})

# API –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
@app.put("/api/v1/admin/service-categories/{category_id}")
async def update_service_category(
    category_id: int,
    request: Request,
    title: str = Form(...),
    db: Session = Depends(deps.get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user = await check_admin_access(request, db)
    if isinstance(user, RedirectResponse):
        return JSONResponse(status_code=403, content={"success": False, "error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = db.query(ServiceCategory).filter(ServiceCategory.id == category_id).first()
        if not category:
            return JSONResponse(status_code=404, content={"success": False, "error": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
        
        category.title = title
        db.commit()
        
        return {"success": True, "message": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"}
        
    except Exception as e:
        db.rollback()
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")
        return JSONResponse(status_code=500, content={"success": False, "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"})

# API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
@app.delete("/api/v1/admin/service-categories/{category_id}")
async def delete_service_category(
    category_id: int,
    request: Request,
    db: Session = Depends(deps.get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user = await check_admin_access(request, db)
    if isinstance(user, RedirectResponse):
        return JSONResponse(status_code=403, content={"success": False, "error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = db.query(ServiceCategory).filter(ServiceCategory.id == category_id).first()
        if not category:
            return JSONResponse(status_code=404, content={"success": False, "error": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
        
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        db.query(ServiceCard).filter(ServiceCard.category_id == category_id).delete()
        
        # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        db.delete(category)
        db.commit()
        
        return {"success": True, "message": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"}
        
    except Exception as e:
        db.rollback()
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")
        return JSONResponse(status_code=500, content={"success": False, "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"})

# API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è
@app.post("/api/v1/admin/service-cards")
async def create_service_card(
    request: Request,
    category_id: int = Form(...),
    title: str = Form(...),
    description: str = Form(""),
    address: str = Form(""),
    phone: str = Form(""),
    email: str = Form(""),
    website: str = Form(""),
    latitude: float = Form(None),
    longitude: float = Form(None),
    tour_360_url: str = Form(""),
    images: List[UploadFile] = File(default=[]),
    tour_360_file: UploadFile = File(None),
    db: Session = Depends(deps.get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user = await check_admin_access(request, db)
    if isinstance(user, RedirectResponse):
        return JSONResponse(status_code=403, content={"success": False, "error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = db.query(ServiceCategory).filter(ServiceCategory.id == category_id).first()
        if not category:
            return JSONResponse(status_code=404, content={"success": False, "error": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–≤–µ–¥–µ–Ω–∏—è
        service_card = ServiceCard(
            category_id=category_id,
            title=title,
            description=description or None,
            address=address or None,
            phone=phone or None,
            email=email or None,
            website=website or None,
            latitude=latitude,
            longitude=longitude,
            tour_360_url=tour_360_url or None,
            is_active=True
        )
        
        db.add(service_card)
        db.commit()
        db.refresh(service_card)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if images and len(images) > 0 and images[0].filename:
            try:
                from app.utils.media_uploader import media_uploader
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä –ë–ï–ó –£–ö–ê–ó–ê–ù–ò–Ø property_id
                # –ú–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä —Å–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ID –∏ –≤–µ—Ä–Ω–µ—Ç –≥–æ—Ç–æ–≤—ã–µ URLs
                upload_result = await media_uploader.upload_property_images(images)
                
                if upload_result.get("status") == "success" and upload_result.get("count", 0) > 0:
                    uploaded_count = upload_result["count"]
                    images_data = upload_result["files"]
                    print(f"DEBUG: –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {uploaded_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä")
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    for i, file_info in enumerate(images_data):
                        # –ë–µ—Ä–µ–º medium URL –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π - –ö–ê–ö –í –û–¢–î–ï–õ–¨–ù–û–ô –ó–ê–ì–†–£–ó–ö–ï
                        image_url = file_info["urls"]["medium"]
                        
                        service_image = ServiceCardImage(
                            service_card_id=service_card.id,
                            url=image_url,
                            is_main=(i == 0)  # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –≥–ª–∞–≤–Ω–æ–µ
                        )
                        db.add(service_image)
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ
                        if i == 0:
                            service_card.image_url = image_url
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                    service_card.photos_uploaded_at = datetime.now()
                    db.commit()
                    print(f"DEBUG: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(images_data)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ë–î")
                else:
                    print(f"ERROR: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä: {upload_result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    
            except Exception as e:
                print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä: {str(e)}")
                import traceback
                print(f"DEBUG: –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 360¬∞ –ø–∞–Ω–æ—Ä–∞–º—É
        if tour_360_file and tour_360_file.filename:
            try:
                from app.utils.panorama_processor import PanoramaProcessor
                
                processor = PanoramaProcessor()
                
                # –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø–∞–Ω–æ—Ä–∞–º—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if service_card.tour_360_file_id:
                    try:
                        await processor.delete_panorama_files(service_card.tour_360_file_id, str(service_card.id))
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–Ω–æ—Ä–∞–º—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º card_id –∫–∞–∫ property_id)
                result = await processor.upload_panorama(tour_360_file, service_card.id)
                
                if not result.get('success'):
                    return JSONResponse(status_code=500, content={"success": False, "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–æ—Ä–∞–º—ã"})
                
                service_card.tour_360_file_id = result.get('file_id')
                service_card.tour_360_original_url = result['urls'].get('original')
                service_card.tour_360_optimized_url = result['urls'].get('optimized')
                service_card.tour_360_preview_url = result['urls'].get('preview')
                service_card.tour_360_thumbnail_url = result['urls'].get('thumbnail')
                service_card.tour_360_metadata = json.dumps(result.get('metadata', {}), ensure_ascii=False)
                service_card.tour_360_uploaded_at = datetime.now()
                
                service_card.tour_360_url = None
                
                db.commit()
                db.refresh(service_card)
                
                response_data = {
                    "success": True,
                    "message": "360¬∞ –ø–∞–Ω–æ—Ä–∞–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞",
                    "file_id": result.get('file_id'),
                    "urls": result['urls'],
                    "metadata": result.get('metadata', {}),
                    "uploaded_at": datetime.now().isoformat()
                }
                
                return JSONResponse(content=response_data)
                
            except Exception as e:
                print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ 360¬∞ –ø–∞–Ω–æ—Ä–∞–º—ã: {str(e)}")
        
        return {"success": True, "message": "–ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ", "service_card": {
            "id": service_card.id,
            "title": service_card.title,
            "description": service_card.description,
            "address": service_card.address,
            "phone": service_card.phone,
            "email": service_card.email,
            "website": service_card.website,
            "latitude": service_card.latitude,
            "longitude": service_card.longitude,
            "image_url": service_card.image_url,
            "is_active": service_card.is_active
        }}
        
    except Exception as e:
        db.rollback()
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {str(e)}")
        return JSONResponse(status_code=500, content={"success": False, "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"})

# API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ 360¬∞ –ø–∞–Ω–æ—Ä–∞–º—ã –∑–∞–≤–µ–¥–µ–Ω–∏—è (—Ñ–∞–π–ª)
@app.post("/api/v1/admin/service-cards/{card_id}/360/upload")
async def upload_service_card_360_file(
    card_id: int,
    request: Request,
    file: UploadFile = File(...),
    db: Session = Depends(deps.get_db)
):
    user = await check_admin_access(request, db)
    if isinstance(user, RedirectResponse):
        return JSONResponse(status_code=403, content={"success": False, "error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
    
    try:
        service_card = db.query(ServiceCard).filter(ServiceCard.id == card_id).first()
        if not service_card:
            return JSONResponse(status_code=404, content={"success": False, "error": "–ó–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"})
        
        if not file.content_type or not file.content_type.startswith('image/'):
            return JSONResponse(status_code=400, content={"success": False, "error": "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"})
        
        from app.utils.panorama_processor import panorama_processor
        
        result = await panorama_processor.upload_panorama(file, card_id)
        
        if not result.get("success"):
            error_message = result.get("message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–æ—Ä–∞–º—ã")
            return JSONResponse(status_code=500, content={"success": False, "error": error_message})
        
        service_card.tour_360_file_id = result['file_id']
        service_card.tour_360_original_url = result['urls']['original']
        service_card.tour_360_optimized_url = result['urls']['optimized']
        service_card.tour_360_preview_url = result['urls']['preview']
        service_card.tour_360_thumbnail_url = result['urls']['thumbnail']
        service_card.tour_360_metadata = json.dumps(result['metadata'], ensure_ascii=False)
        service_card.tour_360_uploaded_at = datetime.now()
        service_card.tour_360_url = None
        
        db.commit()
        db.refresh(service_card)
        
        return JSONResponse(content={
            "success": True,
            "message": "360¬∞ –ø–∞–Ω–æ—Ä–∞–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞",
            "file_id": result['file_id'],
            "urls": result['urls'],
            "metadata": result['metadata'],
            "uploaded_at": datetime.now().isoformat()
        })
        
    except Exception as e:
        db.rollback()
        print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ 360¬∞ –ø–∞–Ω–æ—Ä–∞–º—ã: {str(e)}")
        return JSONResponse(status_code=500, content={"success": False, "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"})

# API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è 360¬∞ –ø–∞–Ω–æ—Ä–∞–º—ã –∑–∞–≤–µ–¥–µ–Ω–∏—è (URL) - –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@app.post("/api/v1/admin/service-cards/{card_id}/360")
async def save_service_card_360_url(
    card_id: int,
    request: Request,
    tour_360_url: str = Form(...),
    db: Session = Depends(deps.get_db)
):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ 360¬∞ –ø–∞–Ω–æ—Ä–∞–º—ã –¥–ª—è –∑–∞–≤–µ–¥–µ–Ω–∏—è (URL)"""
    user = await check_admin_access(request, db)
    if isinstance(user, RedirectResponse):
        return JSONResponse(status_code=403, content={"success": False, "error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–≤–µ–¥–µ–Ω–∏—è
        service_card = db.query(ServiceCard).filter(ServiceCard.id == card_id).first()
        if not service_card:
            return JSONResponse(status_code=404, content={"success": False, "error": "–ó–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"})
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏ –æ—á–∏—â–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–µ –ø–æ–ª—è
        service_card.tour_360_url = tour_360_url
        service_card.tour_360_file_id = None
        service_card.tour_360_original_url = None
        service_card.tour_360_optimized_url = None
        service_card.tour_360_preview_url = None
        service_card.tour_360_thumbnail_url = None
        service_card.tour_360_metadata = None
        service_card.tour_360_uploaded_at = datetime.now()
        
        db.commit()
        
        return {"success": True, "message": "360¬∞ –ø–∞–Ω–æ—Ä–∞–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"}
        
    except Exception as e:
        db.rollback()
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ 360¬∞: {str(e)}")
        return JSONResponse(status_code=500, content={"success": False, "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"})

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ 360¬∞ –ø–∞–Ω–æ—Ä–∞–º–µ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö –∑–∞–≤–µ–¥–µ–Ω–∏—è
@app.get("/api/v1/admin/service-cards/{card_id}/media")
async def get_service_card_media_info(
    card_id: int,
    request: Request,
    db: Session = Depends(deps.get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞—Ö –∑–∞–≤–µ–¥–µ–Ω–∏—è"""
    user = await check_admin_access(request, db)
    if isinstance(user, RedirectResponse):
        return JSONResponse(status_code=403, content={"success": False, "error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–≤–µ–¥–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        service_card = db.query(ServiceCard).options(
            joinedload(ServiceCard.images)
        ).filter(ServiceCard.id == card_id).first()
        
        if not service_card:
            return JSONResponse(status_code=404, content={"success": False, "error": "–ó–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"})
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö
        photos_info = {
            "count": len(service_card.images),
            "last_uploaded": service_card.photos_uploaded_at.isoformat() if service_card.photos_uploaded_at else None,
            "photos": [{"url": img.url, "is_main": img.is_main} for img in service_card.images]
        }
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ 360¬∞ –ø–∞–Ω–æ—Ä–∞–º–µ
        tour_360_info = {
            "has_tour": service_card.has_360_tour(),
            "file_id": service_card.tour_360_file_id,
            "url": service_card.tour_360_url,
            "optimized_url": service_card.tour_360_optimized_url,
            "last_uploaded": service_card.tour_360_uploaded_at.isoformat() if service_card.tour_360_uploaded_at else None,
            "type": "file" if service_card.tour_360_file_id else ("url" if service_card.tour_360_url else None)
        }
        
        return {
            "success": True,
            "photos": photos_info,
            "tour_360": tour_360_info
        }
        
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–¥–∏–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
        return JSONResponse(status_code=500, content={"success": False, "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"})

# API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–≤–µ–¥–µ–Ω–∏—è
@app.post("/api/v1/admin/service-cards/{card_id}/photos")
async def upload_service_card_photos(
    card_id: int,
    photos: List[UploadFile] = File(...),
    db: Session = Depends(deps.get_db)
):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∑–∞–≤–µ–¥–µ–Ω–∏—è - —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    try:
        print("=== –ó–ê–ì–†–£–ó–ö–ê –§–û–¢–û–ì–†–ê–§–ò–ô –ó–ê–í–ï–î–ï–ù–ò–Ø ===")
        print(f"Card ID: {card_id}, —Ñ–∞–π–ª–æ–≤: {len(photos)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–≤–µ–¥–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        service_card = db.query(ServiceCard).filter(ServiceCard.id == card_id).first()
        if not service_card:
            return JSONResponse(status_code=404, content={"success": False, "error": "–ó–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ - –¢–û–ß–ù–û –ö–ê–ö –í –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò
        if not photos or len(photos) < 2:
            return JSONResponse(status_code=400, content={
                "success": False, 
                "message": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏–Ω–∏–º—É–º 2 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
            })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ - –¢–û–ß–ù–û –ö–ê–ö –í –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò
        allowed_types = ["image/jpeg", "image/jpg", "image/png", "image/webp"]
        for photo in photos:
            if photo.content_type not in allowed_types:
                return JSONResponse(status_code=400, content={
                    "success": False,
                    "message": f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {photo.content_type}"
                })
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä - –¢–û–ß–ù–û –ö–ê–ö –í –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò (–ë–ï–ó –í–¢–û–†–û–ì–û –ü–ê–†–ê–ú–ï–¢–†–ê!)
        print("DEBUG: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä...")
        from app.utils.media_uploader import media_uploader
        upload_result = await media_uploader.upload_property_images(photos)
        
        print(f"DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏: {upload_result}")
        
        if upload_result["status"] != "success":
            return JSONResponse(status_code=400, content={
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {upload_result['message']}"
            })
        
        property_media_id = upload_result["property_id"]
        images_data = upload_result["files"]
        
        print(f"DEBUG: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã, media_id: {property_media_id}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ë–î
        old_images = db.query(ServiceCardImage).filter(ServiceCardImage.service_card_id == card_id).all()
        for old_image in old_images:
            db.delete(old_image)
        print(f"DEBUG: –£–¥–∞–ª–µ–Ω–æ {len(old_images)} —Å—Ç–∞—Ä—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        uploaded_images = []
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for i, file_info in enumerate(images_data):
            # –ë–µ—Ä–µ–º medium URL –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
            image_url = file_info["urls"]["medium"]
            
            print(f"DEBUG: –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")
            
            service_image = ServiceCardImage(
                service_card_id=card_id,
                url=image_url,
                is_main=(i == 0)  # –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –æ—Å–Ω–æ–≤–Ω–æ–µ
            )
            db.add(service_image)
            uploaded_images.append(image_url)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è
            if i == 0:
                service_card.image_url = image_url
                print(f"DEBUG: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        from datetime import datetime
        service_card.photos_uploaded_at = datetime.utcnow()
        
        db.commit()
        print(f"DEBUG: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(uploaded_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ë–î")
        print("=== –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û ===")
        
        return {
            "success": True,
            "message": f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(images_data)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
            "count": len(images_data),
            "images": uploaded_images,
            "media_id": property_media_id
        }
            
    except Exception as e:
        db.rollback()
        print(f"–û–®–ò–ë–ö–ê: {str(e)}")
        return JSONResponse(status_code=500, content={"success": False, "message": str(e)})

@app.post("/mobile/test-debug-upload")
async def test_debug_upload(
    request: Request,
    title: str = Form(...),
    photos: List[UploadFile] = File(...)
):
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    try:
        print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ {len(photos)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        files_data = []
        for i, file in enumerate(photos):
            file_content = await file.read()
            file_size = len(file_content)
            print(f"DEBUG: –§–∞–π–ª {i+1}: {file.filename}, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç, —Ç–∏–ø: {file.content_type}")
            
            files_data.append(
                ("images", (file.filename, file_content, file.content_type))
            )
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å —Ñ–∞–π–ª–∞
            await file.seek(0)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º test property_id
        import uuid
        test_property_id = f"test-{uuid.uuid4().hex[:8]}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π PHP-—Å–∫—Ä–∏–ø—Ç
        async with httpx.AsyncClient(timeout=30.0) as client:
            print(f"DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ https://wazir.kg/state/debug_upload.php")
            response = await client.post(
                "https://wazir.kg/state/debug_upload.php",
                files=files_data,
                data={"property_id": test_property_id}
            )
            
            print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {response.status_code}")
            print(f"DEBUG: –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
            
            if response.status_code == 200:
                result = response.json()
                return {
                    "status": "success",
                    "debug_result": result,
                    "files_sent": len(photos),
                    "test_property_id": test_property_id
                }
            else:
                return {
                    "status": "error",
                    "message": f"Debug upload failed with status {response.status_code}",
                    "response": response.text
                }
                
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")
        return {
            "status": "error",
            "message": f"Debug upload error: {str(e)}"
        }

@app.get("/mobile/test-debug", response_class=HTMLResponse)
async def test_debug_page(request: Request):
    return templates.TemplateResponse("mobile/test_debug.html", {"request": request})

@app.put("/api/v1/admin/service-cards/{card_id}")
async def update_service_card(
    card_id: int,
    request: Request,
    title: str = Form(...),
    description: str = Form(""),
    address: str = Form(""),
    phone: str = Form(""),
    email: str = Form(""),
    website: str = Form(""),
    is_active: bool = Form(True),
    db: Session = Depends(deps.get_db)
):
    user = await check_admin_access(request, db)
    if isinstance(user, RedirectResponse):
        return JSONResponse(status_code=403, content={"success": False, "error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
    
    try:
        service_card = db.query(ServiceCard).filter(ServiceCard.id == card_id).first()
        if not service_card:
            return JSONResponse(status_code=404, content={"success": False, "error": "–ó–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"})
        
        service_card.title = title
        service_card.description = description or None
        service_card.address = address or None
        service_card.phone = phone or None
        service_card.email = email or None
        service_card.website = website or None
        service_card.is_active = is_active
        
        db.commit()
        
        return {"success": True, "message": "–ó–∞–≤–µ–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"}
        
    except Exception as e:
        db.rollback()
        print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è: {str(e)}")
        return JSONResponse(status_code=500, content={"success": False, "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"})

@app.delete("/api/v1/admin/service-cards/{card_id}")
async def delete_service_card(
    card_id: int,
    request: Request,
    db: Session = Depends(deps.get_db)
):
    user = await check_admin_access(request, db)
    if isinstance(user, RedirectResponse):
        return JSONResponse(status_code=403, content={"success": False, "error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
    
    try:
        service_card = db.query(ServiceCard).filter(ServiceCard.id == card_id).first()
        if not service_card:
            return JSONResponse(status_code=404, content={"success": False, "error": "–ó–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"})
        
        db.query(ServiceCardImage).filter(ServiceCardImage.service_card_id == card_id).delete()
        
        try:
            from app.utils.media_uploader import media_uploader
            service_media_id = f"service-{card_id}"
            delete_result = await media_uploader.delete_property_images(service_media_id)
            print(f"DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä–∞: {delete_result}")
        except Exception as e:
            print(f"WARNING: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        
        db.delete(service_card)
        db.commit()
        
        return {"success": True, "message": "–ó–∞–≤–µ–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ"}
        
    except Exception as e:
        db.rollback()
        print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è: {str(e)}")
        return JSONResponse(status_code=500, content={"success": False, "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"})

@app.get("/api/v1/admin/test-media-server")
async def test_media_server(request: Request, db: Session = Depends(deps.get_db)):
    try:
        user = await check_admin_access(request, db)
        if isinstance(user, RedirectResponse):
            return JSONResponse(status_code=403, content={"success": False, "error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
    except Exception as e:
        return JSONResponse(status_code=403, content={"success": False, "error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞"})
    
    try:
        from app.utils.media_uploader import media_uploader
        ping_result = await media_uploader.ping_server()
        
        return {
            "success": True,
            "media_server_status": ping_result,
            "connection": ping_result.get("connected", False)
        }
    except Exception as e:
        return JSONResponse(status_code=500, content={
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        })

@app.post("/api/v1/admin/test-upload")
async def test_upload_endpoint(
    request: Request,
    photos: List[UploadFile] = File(...),
    db: Session = Depends(deps.get_db)
):
    try:
        user = await check_admin_access(request, db)
        if isinstance(user, RedirectResponse):
            return JSONResponse(status_code=403, content={"success": False, "error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
    except Exception as e:
        return JSONResponse(status_code=403, content={"success": False, "error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞"})
    
    try:
        result = {
            "success": True,
            "message": f"–ü–æ–ª—É—á–µ–Ω–æ {len(photos)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "files_info": [],
            "media_server_test": None
        }
        
        for i, photo in enumerate(photos):
            file_info = {
                "index": i + 1,
                "filename": photo.filename,
                "content_type": photo.content_type,
                "size": photo.size if hasattr(photo, 'size') else "unknown"
            }
            result["files_info"].append(file_info)
        
        try:
            from app.utils.media_uploader import media_uploader
            ping_result = await media_uploader.ping_server()
            result["media_server_test"] = ping_result
        except Exception as e:
            result["media_server_test"] = {"error": str(e)}
        
        return result
        
    except Exception as e:
        return JSONResponse(status_code=500, content={
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
        })

@app.post("/api/v1/admin/test-direct-upload")
async def test_direct_upload(
    request: Request,
    photos: List[UploadFile] = File(...),
    db: Session = Depends(deps.get_db)
):
    try:
        user = await check_admin_access(request, db)
        if isinstance(user, RedirectResponse):
            return JSONResponse(status_code=403, content={"success": False, "error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"})
    except Exception as e:
        return JSONResponse(status_code=403, content={"success": False, "error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞"})
    
    try:
        print(f"DEBUG: –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ {len(photos)} —Ñ–∞–π–ª–æ–≤")
        
        files_data = []
        for i, file in enumerate(photos):
            file_content = await file.read()
            file_size = len(file_content)
            print(f"DEBUG: –§–∞–π–ª {i+1}: {file.filename}, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
            
            files_data.append(
                ("images[]", (file.filename, file_content, file.content_type))
            )
            await file.seek(0)
        
        test_property_id = f"test-direct-{card_id if 'card_id' in locals() else 'unknown'}"
        
        import httpx
        async with httpx.AsyncClient(timeout=30.0) as client:
            print(f"DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ https://wazir.kg/state/upload.php")
            response = await client.post(
                "https://wazir.kg/state/upload.php",
                files=files_data,
                data={"property_id": test_property_id}
            )
            
            print(f"DEBUG: –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            print(f"DEBUG: –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
            
            if response.status_code == 200:
                result = response.json()
                return {
                    "success": True,
                    "message": "–ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞",
                    "server_response": result,
                    "files_sent": len(photos)
                }
            else:
                return JSONResponse(status_code=400, content={
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}",
                    "response": response.text
                })
                
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        return JSONResponse(status_code=500, content={
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}"
        })

@app.get("/api/v1/admin/test-simple")
async def test_simple():
    import time
    return {"status": "working", "message": "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!", "timestamp": int(time.time())}

@app.post("/api/v1/admin/test-quick-upload")
async def test_quick_upload(photos: List[UploadFile] = File(...)):
    try:
        print(f"=== –ë–´–°–¢–†–´–ô –¢–ï–°–¢: {len(photos)} —Ñ–∞–π–ª–æ–≤ ===")
        
        files_data = []
        for i, file in enumerate(photos):
            file_content = await file.read()
            print(f"–§–∞–π–ª {i+1}: {file.filename}, —Ä–∞–∑–º–µ—Ä: {len(file_content)}")
            files_data.append(("images[]", (file.filename, file_content, file.content_type)))
            await file.seek(0)
        
        import httpx
        async with httpx.AsyncClient(timeout=30.0) as client:
            print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ https://wazir.kg/state/upload.php")
            response = await client.post(
                "https://wazir.kg/state/upload.php",
                files=files_data,
                data={"property_id": "test-quick-123"}
            )
            
            print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            
            return {
                "status_code": response.status_code,
                "response": response.text,
                "files_sent": len(photos)
            }
            
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê: {str(e)}")
        return {"error": str(e)}


async def check_company_access(request: Request, db: Session):
    auth_token = request.cookies.get('access_token')
    if not auth_token:
        return RedirectResponse('/companies/login', status_code=303)
    
    try:
        from jose import jwt
        payload = jwt.decode(auth_token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        
        if not payload.get("is_company"):
            return RedirectResponse('/companies/login', status_code=303)
        
        user = db.query(models.User).filter(models.User.id == payload["sub"]).first()
        if not user or user.role != models.UserRole.COMPANY:
            return RedirectResponse('/companies/login', status_code=303)
        
        return user
        
    except Exception as e:
        print(f"DEBUG: Company auth error: {str(e)}")
        return RedirectResponse('/companies/login', status_code=303)

@app.get("/companies/login")
async def company_login_get(request: Request):
    return templates.TemplateResponse("companies/login.html", {"request": request})

@app.post("/companies/login")
async def company_login_post(
    request: Request,
    email: str = Form(...),
    password: str = Form(...),
    db: Session = Depends(deps.get_db)
):
    company = db.query(models.User).filter(
        models.User.email == email,
        models.User.role == models.UserRole.COMPANY
    ).first()
    
    if not company or not verify_password(password, company.hashed_password):
        return templates.TemplateResponse(
            "companies/login.html",
            {"request": request, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"}
        )
    
    access_token = create_access_token(
        data={"sub": str(company.id), "is_company": True}
    )
    
    response = RedirectResponse(url="/companies/dashboard", status_code=303)
    response.set_cookie(
        key="access_token",
        value=access_token,
        httponly=False,
        max_age=3600 * 24,
        samesite="lax",
        path="/"
    )
    
    return response

@app.get("/companies/logout")
async def company_logout():
    response = RedirectResponse(url="/companies/login", status_code=303)
    response.delete_cookie("access_token")
    return response

@app.get("/companies", response_class=HTMLResponse)
@app.get("/companies/dashboard", response_class=HTMLResponse)
async def company_dashboard(request: Request, db: Session = Depends(deps.get_db)):
    user = await check_company_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–ø–∞–Ω–∏–∏
    company_properties = db.query(models.Property).filter(
        models.Property.user_id == user.id
    ).all()
    
    stats = {
        "total_listings": len(company_properties),
        "active_listings": len([p for p in company_properties if p.status == models.PropertyStatus.ACTIVE]),
        "draft_listings": len([p for p in company_properties if p.status == models.PropertyStatus.DRAFT]),
        "views_this_month": sum([p.views_count for p in company_properties]) if hasattr(models.Property, 'views_count') else 0
    }
    
    return templates.TemplateResponse("companies/dashboard.html", {
        "request": request,
        "current_user": user,
        "stats": stats,
        "recent_properties": company_properties[:5]
    })

@app.get("/companies/listings", response_class=HTMLResponse)
async def company_listings(request: Request, db: Session = Depends(deps.get_db)):
    user = await check_company_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
    
    properties = db.query(models.Property).filter(
        models.Property.user_id == user.id
    ).order_by(models.Property.created_at.desc()).all()
    
    return templates.TemplateResponse("companies/listings.html", {
        "request": request,
        "current_user": user,
        "properties": properties
    })

@app.get("/companies/create-listing", response_class=HTMLResponse)
async def company_create_listing(request: Request, db: Session = Depends(deps.get_db)):
    user = await check_company_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
    
    categories = db.query(models.PropertyCategory).filter(
        models.PropertyCategory.is_active == True
    ).all() if hasattr(models, 'PropertyCategory') else []
    
    return templates.TemplateResponse("companies/create_listing.html", {
        "request": request,
        "current_user": user,
        "categories": categories
    })

@app.get("/companies/analytics", response_class=HTMLResponse)
async def company_analytics(request: Request, db: Session = Depends(deps.get_db)):
    user = await check_company_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
    
    return templates.TemplateResponse("companies/analytics.html", {
        "request": request,
        "current_user": user
    })

@app.get("/companies/profile", response_class=HTMLResponse)
async def company_profile(request: Request, db: Session = Depends(deps.get_db)):
    user = await check_company_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
    
    return templates.TemplateResponse("companies/profile.html", {
        "request": request,
        "current_user": user
    })

@app.get("/mobile/category/{category_slug}", response_class=HTMLResponse, name="category")
async def mobile_category(request: Request, category_slug: str, db: Session = Depends(deps.get_db)):
    categories = load_categories_from_json()
    
    category_name = None
    for cat in categories:
        if cat.get('slug') == category_slug:
            category_name = cat.get('name')
            break
    
    if category_name:
        return RedirectResponse(f'/mobile/search?category={category_name}', status_code=302)
    else:
        return RedirectResponse('/mobile/search', status_code=302)

@app.get("/mobile/search", response_class=HTMLResponse, name="search")
async def mobile_search(
    request: Request, 
    category: str = None, 
    price_min: int = None, 
    price_max: int = None, 
    min_area: float = None, 
    max_area: float = None,
    rooms: int = None,
    min_floor: int = None,
    max_floor: int = None,
    balcony: bool = None,
    furniture: bool = None,
    renovation: bool = None,
    parking: bool = None,
    q: str = None,
    db: Session = Depends(deps.get_db)
):
    print("\n===================================================")
    print("DEBUG: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:")
    print(f"  URL: {request.url}")
    print(f"  –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {q}")
    print(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
    print(f"  –¶–µ–Ω–∞: {price_min} - {price_max}")
    print(f"  –ü–ª–æ—â–∞–¥—å: {min_area} - {max_area}")
    print(f"  –ö–æ–º–Ω–∞—Ç—ã: {rooms}")
    print(f"  –≠—Ç–∞–∂: {min_floor} - {max_floor}")
    print(f"  –ë–∞–ª–∫–æ–Ω: {balcony}, –ú–µ–±–µ–ª—å: {furniture}, –†–µ–º–æ–Ω—Ç: {renovation}, –ü–∞—Ä–∫–∏–Ω–≥: {parking}")
    print("===================================================")
    
    if not category:
        category = "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"
    
    query = db.query(models.Property).filter(models.Property.status == 'active')
    
    categories = db.query(models.Category).all()
    print(f"DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {[cat.name for cat in categories]}")
    
    general_categories = load_categories_from_json()
    print(f"DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ–±—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ JSON: {[cat['name'] for cat in general_categories]}")
    
    if category and category != "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
        print(f"DEBUG: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
        query = query.join(models.Property.categories).filter(models.Category.name == category)
    
    if q:
        search_term = f"%{q}%"
        query = query.filter(or_(
            models.Property.title.ilike(search_term),
            models.Property.address.ilike(search_term),
            models.Property.description.ilike(search_term)
        ))
    
    if price_min is not None:
        query = query.filter(models.Property.price >= price_min)
    
    if price_max is not None:
        query = query.filter(models.Property.price <= price_max)
    
    if min_area is not None:
        query = query.filter(models.Property.area >= min_area)
    
    if max_area is not None:
        query = query.filter(models.Property.area <= max_area)
    
    if rooms is not None:
        query = query.filter(models.Property.rooms == rooms)
    
    if min_floor is not None:
        query = query.filter(models.Property.floor >= min_floor)
    
    if max_floor is not None:
        query = query.filter(models.Property.floor <= max_floor)
    
    if balcony is not None and balcony:
        query = query.filter(models.Property.has_balcony == True)
    
    if furniture is not None and furniture:
        query = query.filter(models.Property.has_furniture == True)
    
    if renovation is not None and renovation:
        query = query.filter(models.Property.has_renovation == True)
    
    if parking is not None and parking:
        query = query.filter(models.Property.has_parking == True)
    
    properties_db = query.options(joinedload(models.Property.images)).all()
    
    properties = []
    for prop in properties_db:
        main_image = next((img for img in prop.images if img.is_main), None) or \
                   (prop.images[0] if prop.images else None)
        
        images = [get_valid_image_url(img.url) for img in prop.images] if prop.images else []
        
        properties.append({
            "id": prop.id,
            "title": prop.title,
            "price": prop.price,
            "address": prop.address,
            "rooms": prop.rooms,
            "area": prop.area,
            "floor": prop.floor,
            "building_floors": prop.building_floors,
            "has_tour": bool(prop.tour_360_url or prop.tour_360_file_id),
            "tour_360_url": prop.tour_360_url,
            "tour_360_file_id": prop.tour_360_file_id,
            "tour_360_optimized_url": prop.tour_360_optimized_url,
            "has_balcony": prop.has_balcony,
            "has_furniture": prop.has_furniture,
            "has_renovation": prop.has_renovation,
            "has_parking": prop.has_parking,
            "image_url": get_valid_image_url(main_image.url if main_image else None),
            "images": images,
            "images_count": len(images)
        })
    
    weather = {"temperature": "+20¬∞"}
    currency = {"value": "87.5"}
    
    return templates.TemplateResponse("layout/search.html", {
        "request": request, 
        "properties": properties,
        "weather": weather,
        "currency": currency,
        "categories": categories,
        "general_categories": general_categories,  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        "selected_category": category,
        "q": q,
        "filter": {
            "category": category,
            "price_min": price_min,
            "price_max": price_max,
            "min_area": min_area,
            "max_area": max_area,
            "rooms": rooms,
            "min_floor": min_floor,
            "max_floor": max_floor,
            "balcony": balcony,
            "furniture": furniture,
            "renovation": renovation,
            "parking": parking
        }
    })

@app.post("/api/v1/init-default-categories")
async def init_default_categories(request: Request, db: Session = Depends(deps.get_db)):
    try:
        from app.services.category import general_category
        general_category.create_default_categories(db)
        return {"message": "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ"}
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return {"error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
