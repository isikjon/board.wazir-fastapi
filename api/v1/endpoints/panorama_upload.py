from typing import Any
from fastapi import APIRouter, Depends, Request, UploadFile, File, HTTPException
from fastapi.responses import RedirectResponse, JSONResponse
from sqlalchemy.orm import Session
from app.api import deps
from app import models
from app.utils.panorama_processor import panorama_processor, PanoramaProcessor
from datetime import datetime
import json
import os
import logging
import tempfile
from pathlib import Path
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

router = APIRouter()

async def check_admin_access(request: Request, db: Session):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    logger.info("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    
    auth_token = request.cookies.get('access_token')
    if not auth_token:
        logger.warning("‚ùå –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ cookies")
        return RedirectResponse('/admin/login', status_code=303)
    
    try:
        from jose import jwt
        from config import settings
        payload = jwt.decode(auth_token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        logger.debug(f"üîç Payload —Ç–æ–∫–µ–Ω–∞: {payload}")
        
        if not payload.get("is_admin"):
            logger.warning("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return RedirectResponse('/admin/login', status_code=303)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = db.query(models.User).filter(models.User.id == payload["sub"]).first()
        if not user:
            logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {payload['sub']} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return RedirectResponse('/admin/login', status_code=303)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if user.role != models.UserRole.ADMIN:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.email} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (—Ä–æ–ª—å: {user.role})")
            return RedirectResponse('/admin/login', status_code=303)
        
        logger.info(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {user.email} (ID: {user.id})")
        return user
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}")
        return RedirectResponse('/admin/login', status_code=303)

async def check_company_access(request: Request, db: Session):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
    logger.info("üè¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫–æ–º–ø–∞–Ω–∏–∏...")
    
    auth_token = request.cookies.get('access_token')
    if not auth_token:
        logger.warning("‚ùå –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ cookies")
        return RedirectResponse('/companies/login', status_code=303)
    
    try:
        from jose import jwt
        from config import settings
        payload = jwt.decode(auth_token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        logger.debug(f"üîç Payload —Ç–æ–∫–µ–Ω–∞: {payload}")
        
        if not payload.get("is_company"):
            logger.warning("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–ø–∞–Ω–∏–µ–π")
            return RedirectResponse('/companies/login', status_code=303)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∫–æ–º–ø–∞–Ω–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = db.query(models.User).filter(models.User.id == payload["sub"]).first()
        if not user:
            logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {payload['sub']} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return RedirectResponse('/companies/login', status_code=303)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–æ–º–ø–∞–Ω–∏—è
        if user.role != models.UserRole.COMPANY:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.email} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–ø–∞–Ω–∏–µ–π (—Ä–æ–ª—å: {user.role})")
            return RedirectResponse('/companies/login', status_code=303)
        
        logger.info(f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {user.email} (ID: {user.id})")
        return user
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫–æ–º–ø–∞–Ω–∏–∏: {str(e)}")
        return RedirectResponse('/companies/login', status_code=303)

@router.get("/admin/properties/{property_id}/360")
async def get_admin_panorama_info(
    property_id: int,
    request: Request,
    db: Session = Depends(deps.get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ 360¬∞ –ø–∞–Ω–æ—Ä–∞–º–µ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""
    logger.info(f"üìä –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ 360¬∞ –ø–∞–Ω–æ—Ä–∞–º–µ –¥–ª—è —Å–≤–æ–π—Å—Ç–≤–∞ {property_id} (–∞–¥–º–∏–Ω–∫–∞)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user = await check_admin_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        logger.debug(f"üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å ID: {property_id}")
        property_obj = db.query(models.Property).filter(models.Property.id == property_id).first()
        
        if not property_obj:
            logger.error(f"‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID {property_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            raise HTTPException(status_code=404, detail="–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        logger.debug(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {property_obj.title}")
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–Ω–æ—Ä–∞–º–µ
        panorama_info = {
            "has_360": bool(property_obj.tour_360_url or property_obj.tour_360_file_id),
            "tour_360_url": property_obj.tour_360_url,
            "tour_360_file_id": property_obj.tour_360_file_id,
            "tour_360_original_url": property_obj.tour_360_original_url,
            "tour_360_optimized_url": property_obj.tour_360_optimized_url,
            "tour_360_preview_url": property_obj.tour_360_preview_url,
            "tour_360_thumbnail_url": property_obj.tour_360_thumbnail_url,
            "tour_360_uploaded_at": property_obj.tour_360_uploaded_at.isoformat() if property_obj.tour_360_uploaded_at else None,
            "tour_360_metadata": json.loads(property_obj.tour_360_metadata) if property_obj.tour_360_metadata else None
        }
        
        logger.info(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–Ω–æ—Ä–∞–º–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {property_id}")
        logger.debug(f"üìÑ –î–∞–Ω–Ω—ã–µ –ø–∞–Ω–æ—Ä–∞–º—ã: {json.dumps(panorama_info, indent=2, ensure_ascii=False)}")
        
        return JSONResponse(content=panorama_info)
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–Ω–æ—Ä–∞–º–µ: {str(e)}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@router.post("/admin/properties/{property_id}/360/upload")
async def upload_admin_panorama(
    property_id: int,
    request: Request,
    file: UploadFile = File(...),
    db: Session = Depends(deps.get_db)
):
    logger.info(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É 360¬∞ –ø–∞–Ω–æ—Ä–∞–º—ã –¥–ª—è —Å–≤–æ–π—Å—Ç–≤–∞ {property_id} (–∞–¥–º–∏–Ω–∫–∞)")
    logger.debug(f"üìÇ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ: {file.filename}, —Ä–∞–∑–º–µ—Ä: {file.size if hasattr(file, 'size') else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
    
    user = await check_admin_access(request, db)
    if isinstance(user, RedirectResponse):
        logger.warning("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        return user
    
    try:
        logger.debug(f"üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å ID: {property_id}")
        property_obj = db.query(models.Property).filter(models.Property.id == property_id).first()
        
        if not property_obj:
            logger.error(f"‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID {property_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            raise HTTPException(status_code=404, detail="–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        logger.info(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {property_obj.title}")
        
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø–∞–Ω–æ—Ä–∞–º...")
        processor = PanoramaProcessor()
        
        if property_obj.tour_360_file_id:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø–∞–Ω–æ—Ä–∞–º—ã: {property_obj.tour_360_file_id}")
            try:
                await processor.delete_panorama_files(property_obj.tour_360_file_id, property_id)
                logger.info("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –ø–∞–Ω–æ—Ä–∞–º—ã —É–¥–∞–ª–µ–Ω—ã")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}")
        
        logger.info("üé® –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞–Ω–æ—Ä–∞–º—ã...")
        result = await processor.upload_panorama(file, property_id)
        logger.info("üéâ –ü–∞–Ω–æ—Ä–∞–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")
        
        if not result.get("success"):
            error_message = result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–æ—Ä–∞–º—ã")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–æ—Ä–∞–º—ã: {error_message}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–æ—Ä–∞–º—ã: {error_message}")
        
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        property_obj.tour_360_file_id = result['file_id']
        property_obj.tour_360_original_url = result['urls']['original']
        property_obj.tour_360_optimized_url = result['urls']['optimized']
        property_obj.tour_360_preview_url = result['urls']['preview']
        property_obj.tour_360_thumbnail_url = result['urls']['thumbnail']
        property_obj.tour_360_metadata = json.dumps(result['metadata'], ensure_ascii=False)
        property_obj.tour_360_uploaded_at = datetime.now()
        
        property_obj.tour_360_url = None
        
        logger.debug("üìÑ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:")
        logger.debug(f"  file_id: {property_obj.tour_360_file_id}")
        logger.debug(f"  original_url: {property_obj.tour_360_original_url}")
        logger.debug(f"  optimized_url: {property_obj.tour_360_optimized_url}")
        
        logger.debug("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        db.commit()
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        logger.debug("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –ë–î...")
        db.refresh(property_obj)
        
        logger.debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        logger.debug(f"  tour_360_file_id: {property_obj.tour_360_file_id}")
        logger.debug(f"  tour_360_original_url: {property_obj.tour_360_original_url}")
        logger.debug(f"  tour_360_optimized_url: {property_obj.tour_360_optimized_url}")
        
        response_data = {
            "success": True,
            "message": "360¬∞ –ø–∞–Ω–æ—Ä–∞–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞",
            "file_id": result['file_id'],
            "urls": {
                "original": result['urls']['original'],
                "optimized": result['urls']['optimized'],
                "preview": result['urls']['preview'],
                "thumbnail": result['urls']['thumbnail']
            },
            "metadata": result['metadata'],
            "uploaded_at": datetime.now().isoformat()
        }
        
        logger.info("üéâ –ó–∞–≥—Ä—É–∑–∫–∞ 360¬∞ –ø–∞–Ω–æ—Ä–∞–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.debug(f"üìã –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É: {json.dumps(response_data, indent=2, ensure_ascii=False, default=str)}")
        
        return JSONResponse(content=response_data)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–æ—Ä–∞–º—ã: {str(e)}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–æ—Ä–∞–º—ã: {str(e)}")

@router.delete("/admin/properties/{property_id}/360")
async def delete_admin_panorama(
    property_id: int,
    request: Request,
    db: Session = Depends(deps.get_db)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ 360¬∞ –ø–∞–Ω–æ—Ä–∞–º—ã –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""
    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ 360¬∞ –ø–∞–Ω–æ—Ä–∞–º—ã –¥–ª—è —Å–≤–æ–π—Å—Ç–≤–∞ {property_id} (–∞–¥–º–∏–Ω–∫–∞)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user = await check_admin_access(request, db)
    if isinstance(user, RedirectResponse):
        return user
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        logger.debug(f"üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å ID: {property_id}")
        property_obj = db.query(models.Property).filter(models.Property.id == property_id).first()
        
        if not property_obj:
            logger.error(f"‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID {property_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            raise HTTPException(status_code=404, detail="–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        logger.info(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {property_obj.title}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if property_obj.tour_360_file_id:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–∞–Ω–æ—Ä–∞–º—ã: {property_obj.tour_360_file_id}")
            processor = PanoramaProcessor()
            try:
                await processor.delete_panorama_files(property_obj.tour_360_file_id, property_id)
                logger.info("‚úÖ –§–∞–π–ª—ã –ø–∞–Ω–æ—Ä–∞–º—ã —É–¥–∞–ª–µ–Ω—ã")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {str(e)}")
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –ø–∞–Ω–æ—Ä–∞–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        property_obj.tour_360_url = None
        property_obj.tour_360_file_id = None
        property_obj.tour_360_original_url = None
        property_obj.tour_360_optimized_url = None
        property_obj.tour_360_preview_url = None
        property_obj.tour_360_thumbnail_url = None
        property_obj.tour_360_metadata = None
        property_obj.tour_360_uploaded_at = None
        
        db.commit()
        logger.info("‚úÖ –ü–∞–Ω–æ—Ä–∞–º–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        return JSONResponse(content={
            "success": True,
            "message": "360¬∞ –ø–∞–Ω–æ—Ä–∞–º–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
        })
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–Ω–æ—Ä–∞–º—ã: {str(e)}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–Ω–æ—Ä–∞–º—ã: {str(e)}")

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π
@router.get("/companies/properties/{property_id}/360")
async def get_company_panorama_info(
    property_id: int,
    request: Request,
    db: Session = Depends(deps.get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ 360¬∞ –ø–∞–Ω–æ—Ä–∞–º–µ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π"""
    logger.info(f"üìä –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ 360¬∞ –ø–∞–Ω–æ—Ä–∞–º–µ –¥–ª—è —Å–≤–æ–π—Å—Ç–≤–∞ {property_id} (–∫–æ–º–ø–∞–Ω–∏—è)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫–æ–º–ø–∞–Ω–∏–∏
    company = await check_company_access(request, db)
    if isinstance(company, RedirectResponse):
        return company
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        logger.debug(f"üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å ID: {property_id}")
        property_obj = db.query(models.Property).filter(
            models.Property.id == property_id,
            models.Property.owner_id == company.id
        ).first()
        
        if not property_obj:
            logger.error(f"‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID {property_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–æ–º–ø–∞–Ω–∏–∏")
            raise HTTPException(status_code=404, detail="–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        logger.debug(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {property_obj.title}")
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–Ω–æ—Ä–∞–º–µ
        panorama_info = {
            "has_360": bool(property_obj.tour_360_url or property_obj.tour_360_file_id),
            "tour_360_url": property_obj.tour_360_url,
            "tour_360_file_id": property_obj.tour_360_file_id,
            "tour_360_original_url": property_obj.tour_360_original_url,
            "tour_360_optimized_url": property_obj.tour_360_optimized_url,
            "tour_360_preview_url": property_obj.tour_360_preview_url,
            "tour_360_thumbnail_url": property_obj.tour_360_thumbnail_url,
            "tour_360_uploaded_at": property_obj.tour_360_uploaded_at.isoformat() if property_obj.tour_360_uploaded_at else None,
            "tour_360_metadata": json.loads(property_obj.tour_360_metadata) if property_obj.tour_360_metadata else None
        }
        
        logger.info(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–Ω–æ—Ä–∞–º–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {property_id}")
        return JSONResponse(content=panorama_info)
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–Ω–æ—Ä–∞–º–µ: {str(e)}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@router.post("/companies/properties/{property_id}/360/upload")
async def upload_company_panorama(
    property_id: int,
    request: Request,
    file: UploadFile = File(...),
    db: Session = Depends(deps.get_db)
):
    logger.info(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É 360¬∞ –ø–∞–Ω–æ—Ä–∞–º—ã –¥–ª—è —Å–≤–æ–π—Å—Ç–≤–∞ {property_id} (–∫–æ–º–ø–∞–Ω–∏—è)")
    logger.debug(f"üìÇ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ: {file.filename}, —Ä–∞–∑–º–µ—Ä: {file.size if hasattr(file, 'size') else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
    
    company = await check_company_access(request, db)
    if isinstance(company, RedirectResponse):
        logger.warning("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∫–æ–º–ø–∞–Ω–∏—è")
        return company
    
    try:
        logger.debug(f"üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å ID: {property_id}")
        property_obj = db.query(models.Property).filter(
            models.Property.id == property_id,
            models.Property.owner_id == company.id
        ).first()
        
        if not property_obj:
            logger.error(f"‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID {property_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–æ–º–ø–∞–Ω–∏–∏")
            raise HTTPException(status_code=404, detail="–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        logger.info(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {property_obj.title}")
        
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø–∞–Ω–æ—Ä–∞–º...")
        processor = PanoramaProcessor()
        
        if property_obj.tour_360_file_id:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø–∞–Ω–æ—Ä–∞–º—ã: {property_obj.tour_360_file_id}")
            try:
                await processor.delete_panorama_files(property_obj.tour_360_file_id, property_id)
                logger.info("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –ø–∞–Ω–æ—Ä–∞–º—ã —É–¥–∞–ª–µ–Ω—ã")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}")
        
        logger.info("üé® –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞–Ω–æ—Ä–∞–º—ã...")
        result = await processor.upload_panorama(file, property_id)
        logger.info("üéâ –ü–∞–Ω–æ—Ä–∞–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")
        
        if not result.get("success"):
            error_message = result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–æ—Ä–∞–º—ã")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–æ—Ä–∞–º—ã: {error_message}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–æ—Ä–∞–º—ã: {error_message}")
        
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        property_obj.tour_360_file_id = result['file_id']
        property_obj.tour_360_original_url = result['urls']['original']
        property_obj.tour_360_optimized_url = result['urls']['optimized']
        property_obj.tour_360_preview_url = result['urls']['preview']
        property_obj.tour_360_thumbnail_url = result['urls']['thumbnail']
        property_obj.tour_360_metadata = json.dumps(result['metadata'], ensure_ascii=False)
        property_obj.tour_360_uploaded_at = datetime.now()
        
        property_obj.tour_360_url = None
        
        logger.debug("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        db.commit()
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        logger.debug("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –ë–î...")
        db.refresh(property_obj)
        
        response_data = {
            "success": True,
            "message": "360¬∞ –ø–∞–Ω–æ—Ä–∞–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞",
            "file_id": result['file_id'],
            "urls": {
                "original": result['urls']['original'],
                "optimized": result['urls']['optimized'],
                "preview": result['urls']['preview'],
                "thumbnail": result['urls']['thumbnail']
            },
            "metadata": result['metadata'],
            "uploaded_at": datetime.now().isoformat()
        }
        
        logger.info("üéâ –ó–∞–≥—Ä—É–∑–∫–∞ 360¬∞ –ø–∞–Ω–æ—Ä–∞–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.debug(f"üìã –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É: {json.dumps(response_data, indent=2, ensure_ascii=False, default=str)}")
        
        return JSONResponse(content=response_data)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–æ—Ä–∞–º—ã: {str(e)}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–æ—Ä–∞–º—ã: {str(e)}")

@router.delete("/companies/properties/{property_id}/360")
async def delete_company_panorama(
    property_id: int,
    request: Request,
    db: Session = Depends(deps.get_db)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ 360¬∞ –ø–∞–Ω–æ—Ä–∞–º—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π"""
    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ 360¬∞ –ø–∞–Ω–æ—Ä–∞–º—ã –¥–ª—è —Å–≤–æ–π—Å—Ç–≤–∞ {property_id} (–∫–æ–º–ø–∞–Ω–∏—è)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫–æ–º–ø–∞–Ω–∏–∏
    company = await check_company_access(request, db)
    if isinstance(company, RedirectResponse):
        return company
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        logger.debug(f"üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å ID: {property_id}")
        property_obj = db.query(models.Property).filter(
            models.Property.id == property_id,
            models.Property.owner_id == company.id
        ).first()
        
        if not property_obj:
            logger.error(f"‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID {property_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–æ–º–ø–∞–Ω–∏–∏")
            raise HTTPException(status_code=404, detail="–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        logger.info(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {property_obj.title}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if property_obj.tour_360_file_id:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–∞–Ω–æ—Ä–∞–º—ã: {property_obj.tour_360_file_id}")
            processor = PanoramaProcessor()
            try:
                await processor.delete_panorama_files(property_obj.tour_360_file_id, property_id)
                logger.info("‚úÖ –§–∞–π–ª—ã –ø–∞–Ω–æ—Ä–∞–º—ã —É–¥–∞–ª–µ–Ω—ã")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {str(e)}")
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –ø–∞–Ω–æ—Ä–∞–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        property_obj.tour_360_url = None
        property_obj.tour_360_file_id = None
        property_obj.tour_360_original_url = None
        property_obj.tour_360_optimized_url = None
        property_obj.tour_360_preview_url = None
        property_obj.tour_360_thumbnail_url = None
        property_obj.tour_360_metadata = None
        property_obj.tour_360_uploaded_at = None
        
        db.commit()
        logger.info("‚úÖ –ü–∞–Ω–æ—Ä–∞–º–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        return JSONResponse(content={
            "success": True,
            "message": "360¬∞ –ø–∞–Ω–æ—Ä–∞–º–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
        })
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–Ω–æ—Ä–∞–º—ã: {str(e)}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–Ω–æ—Ä–∞–º—ã: {str(e)}") 