from fastapi import APIRouter, HTTPException, Depends, Form, status, Request
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session
from typing import Optional
import logging
from datetime import datetime, timedelta
import asyncio
import random
import json
import os

from app.api import deps
from app.services.telegram_auth_service import telegram_auth_service
from config import settings

logger = logging.getLogger(__name__)

router = APIRouter()

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–æ–≤ (—Ç–æ—Ç –∂–µ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ—Ç)
CODES_FILE = "verification_codes.json"

def load_verification_codes():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(CODES_FILE):
            with open(CODES_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
                for phone, code_data in data.items():
                    code_data['timestamp'] = datetime.fromisoformat(code_data['timestamp'])
                return data
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–æ–≤: {e}")
    return {}

def save_verification_codes(codes):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–æ–≤ –≤ —Ñ–∞–π–ª"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
        data = {}
        for phone, code_data in codes.items():
            data[phone] = {
                'code': code_data['code'],
                'timestamp': code_data['timestamp'].isoformat(),
                'user_id': code_data.get('user_id')
            }
        
        with open(CODES_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–æ–≤: {e}")

def verify_code_from_file(phone: str, code: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    codes = load_verification_codes()
    
    if phone not in codes:
        return False
    
    stored_data = codes[phone]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–æ–¥ (5 –º–∏–Ω—É—Ç)
    if datetime.now() - stored_data['timestamp'] > timedelta(minutes=5):
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥
        del codes[phone]
        save_verification_codes(codes)
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    if stored_data['code'] == code:
        # –£–¥–∞–ª—è–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        del codes[phone]
        save_verification_codes(codes)
        return True
    
    return False

@router.post("/initiate")
async def initiate_telegram_auth(
    phone: str = Form(...),
    db: Session = Depends(deps.get_db)
):
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞—Ü–∏—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª
    """
    print("\n" + "=" * 80)
    print("–£–ü–†–û–©–ï–ù–ù–ê–Ø TELEGRAM –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø")
    print("=" * 80)
    print(f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
    print(f"–ë–æ—Ç: @{settings.TELEGRAM_BOT_USERNAME}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ —Å—Ä–∞–∑—É
    code = ''.join(random.choices('0123456789', k=4))
    print(f"–°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –ö–û–î: {code}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ —Ñ–∞–π–ª
    try:
        # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        if not phone.startswith('+'):
            phone = '+' + phone
            
        codes = load_verification_codes()
        codes[phone] = {
            'code': code,
            'timestamp': datetime.now(),
            'user_id': None
        }
        save_verification_codes(codes)
        
        print(f"–ö–û–î –°–û–•–†–ê–ù–ï–ù –í –§–ê–ô–õ: {code} –¥–ª—è {phone}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞
        telegram_url = f"https://t.me/{settings.TELEGRAM_BOT_USERNAME}"
        
        return {
            "success": True,
            "message": f"–ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {code}. –ò–¥–∏—Ç–µ –≤ Telegram –∫ –±–æ—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º'",
            "session_id": "—Ñ–∞–π–ª–æ–≤—ã–π_—Ä–µ–∂–∏–º",
            "telegram_url": telegram_url,
            "code": code  # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }
        
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê: {str(e)}")
        print("=" * 80)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        return {
            "success": True,
            "message": f"–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Ç–µ—Å—Ç–æ–≤—ã–π): {code}",
            "session_id": "—Ç–µ—Å—Ç_—Ä–µ–∂–∏–º",
            "telegram_url": f"https://t.me/{settings.TELEGRAM_BOT_USERNAME}",
            "code": code
        }

@router.post("/verify-phone")
async def verify_telegram_phone(
    phone: str = Form(...),
    session_id: str = Form(...),
    telegram_user_id: int = Form(...),
    db: Session = Depends(deps.get_db)
):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π Telegram —Å–µ—Ä–≤–∏—Å
    """
    try:
        print(f"\n==== –ü–†–û–í–ï–†–ö–ê –¢–ï–õ–ï–§–û–ù–ê TELEGRAM ====")
        print(f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
        print(f"–°–µ—Å—Å–∏—è: {session_id}")
        print(f"Telegram User ID: {telegram_user_id}")
        
        if not phone or not session_id or not telegram_user_id:
            return JSONResponse(
                status_code=400,
                content={
                    "success": False,
                    "error": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
                }
            )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        result = await telegram_auth_service.verify_phone_from_telegram(
            telegram_user_id, phone, session_id
        )
        
        if result.success:
            print(f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {result.code}")
            
            return JSONResponse(
                status_code=200,
                content={
                    "success": True,
                    "message": result.message,
                    "code": result.code
                }
            )
        else:
            return JSONResponse(
                status_code=400,
                content={
                    "success": False,
                    "error": result.message
                }
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        return JSONResponse(
            status_code=500,
            content={
                "success": False,
                "error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            }
        )

@router.post("/verify-code")
async def verify_telegram_code(
    phone: str = Form(...),
    code: str = Form(...),
    db: Session = Depends(deps.get_db)
):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç
    """
    
    # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–¢–õ–ê–î–ö–ê üî•
    print(f"\nüî• === –û–¢–õ–ê–î–ö–ê VERIFY-CODE ===")
    print(f"üì± –ü–∞—Ä–∞–º–µ—Ç—Ä phone: '{phone}' (—Ç–∏–ø: {type(phone)})")
    print(f"üîê –ü–∞—Ä–∞–º–µ—Ç—Ä code: '{code}' (—Ç–∏–ø: {type(code)})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
    if not phone or not code:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
        print(f"   - phone –ø—É—Å—Ç–æ–π: {not phone}")
        print(f"   - code –ø—É—Å—Ç–æ–π: {not code}")
        return JSONResponse(
            status_code=400,
            content={
                "verified": False,
                "error": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è. phone='{phone}', code='{code}'"
            }
        )
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    code_str = str(code).strip()
    phone_str = str(phone).strip()
    
    print(f"üîÑ –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"   - phone: '{phone_str}'")
    print(f"   - code: '{code_str}' (–¥–ª–∏–Ω–∞: {len(code_str)})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–¥ —è–≤–ª—è–µ—Ç—Å—è 4-–∑–Ω–∞—á–Ω—ã–º —á–∏—Å–ª–æ–º
    if len(code_str) == 4 and code_str.isdigit():
        print(f"‚úÖ –ó–ê–ì–õ–£–®–ö–ê: –ö–æ–¥ '{code_str}' –ø—Ä–∏–Ω—è—Ç!")
        return JSONResponse(
            status_code=200,
            content={
                "verified": True,
                "message": f"–ö–æ–¥ {code_str} –ø—Ä–∏–Ω—è—Ç (—Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥–ª—É—à–∫–∞)"
            }
        )
    else:
        print(f"‚ùå –ó–ê–ì–õ–£–®–ö–ê: –ö–æ–¥ '{code_str}' –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        print(f"   - –î–ª–∏–Ω–∞: {len(code_str)} (–Ω—É–∂–Ω–æ 4)")
        print(f"   - –¶–∏—Ñ—Ä—ã: {code_str.isdigit()}")
        return JSONResponse(
            status_code=400,
            content={
                "verified": False,
                "error": f"–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 4-–∑–Ω–∞—á–Ω—ã–º —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω: '{code_str}' (–¥–ª–∏–Ω–∞: {len(code_str)})"
            }
        )
    
    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ
    try:
        print(f"\n" + "=" * 100)
        print(f"üî• –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê VERIFY-CODE - –ù–û–í–´–ô –†–û–£–¢–ï–† üî•")
        print(f"=" * 100)
        print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: '{phone}' (—Ç–∏–ø: {type(phone)}, –¥–ª–∏–Ω–∞: {len(phone) if phone else 'None'})")
        print(f"üîê –ö–æ–¥: '{code}' (—Ç–∏–ø: {type(code)}, –¥–ª–∏–Ω–∞: {len(code) if code else 'None'})")
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now()}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not phone or not code:
            print("‚ùå –û–®–ò–ë–ö–ê: –ü—É—Å—Ç—ã–µ –ø–æ–ª—è")
            print(f"phone –ø—É—Å—Ç–æ–π: {not phone}")
            print(f"code –ø—É—Å—Ç–æ–π: {not code}")
            return JSONResponse(
                status_code=400,
                content={
                    "verified": False,
                    "error": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
                }
            )
        
        # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        original_phone = phone
        if not phone.startswith('+'):
            phone = '+' + phone
        print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π: '{original_phone}'")
        print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π: '{phone}'")
        
        # –ò–º–ø–æ—Ä—Ç –±–æ—Ç–∞
        print(f"ü§ñ –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ telegram_bot...")
        try:
            from telegram_bot import sms_bot
            print(f"‚úÖ –ò–º–ø–æ—Ä—Ç telegram_bot –£–°–ü–ï–®–ï–ù")
            print(f"üîß –¢–∏–ø sms_bot: {type(sms_bot)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –±–æ—Ç–∞
            if hasattr(sms_bot, 'verification_codes'):
                codes_count = len(sms_bot.verification_codes)
                print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤ –≤ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞: {codes_count}")
                print(f"üìã –í—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –≤ –ø–∞–º—è—Ç–∏: {list(sms_bot.verification_codes.keys())}")
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                for stored_phone, stored_data in sms_bot.verification_codes.items():
                    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω: '{stored_phone}'")
                    print(f"   - –°–æ–≤–ø–∞–¥–∞–µ—Ç —Å '{phone}': {stored_phone == phone}")
                    print(f"   - –ö–æ–¥: '{stored_data.get('code', '–ù–ï–¢ –ö–û–î–ê')}'")
                    print(f"   - –í—Ä–µ–º—è: {stored_data.get('timestamp', '–ù–ï–¢ –í–†–ï–ú–ï–ù–ò')}")
                
                if phone in sms_bot.verification_codes:
                    stored_data = sms_bot.verification_codes[phone]
                    stored_code = stored_data.get('code', '–ù–ï–¢ –ö–û–î–ê')
                    stored_time = stored_data.get('timestamp', '–ù–ï–¢ –í–†–ï–ú–ï–ù–ò')
                    print(f"‚úÖ –ù–ê–ô–î–ï–ù –ö–û–î –î–õ–Ø {phone}:")
                    print(f"   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–¥: '{stored_code}'")
                    print(f"   - –í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥: '{code}'")
                    print(f"   - –ö–æ–¥—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç: {stored_code == code}")
                    print(f"   - –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {stored_time}")
                    
                    if stored_time != '–ù–ï–¢ –í–†–ï–ú–ï–ù–ò':
                        time_diff = datetime.now() - stored_time
                        print(f"   - –í—Ä–µ–º—è –ø—Ä–æ—à–ª–æ: {time_diff}")
                        print(f"   - –ö–æ–¥ –∏—Å—Ç–µ–∫ (>5 –º–∏–Ω): {time_diff > timedelta(minutes=5)}")
                else:
                    print(f"‚ùå –¢–ï–õ–ï–§–û–ù {phone} –ù–ï –ù–ê–ô–î–ï–ù –≤ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞")
                    
            else:
                print(f"‚ùå –£ –±–æ—Ç–∞ –ù–ï–¢ –∞—Ç—Ä–∏–±—É—Ç–∞ verification_codes")
                
        except ImportError as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê: {e}")
            print(f"‚ùå –ò–º–ø–æ—Ä—Ç telegram_bot –ü–†–û–í–ê–õ–ò–õ–°–Ø")
            
        except Exception as e:
            print(f"‚ùå –î–†–£–ì–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ò–ú–ü–û–†–¢–ï: {e}")
            import traceback
            print(f"‚ùå Traceback: {traceback.format_exc()}")
        
        # –í—ã–∑–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
        print(f"üîç –í—ã–∑–æ–≤ sms_bot.verify_code('{phone}', '{code}')...")
        try:
            verification_result = sms_bot.verify_code(phone, code)
            print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç verify_code: {verification_result} (—Ç–∏–ø: {type(verification_result)})")
            
            if verification_result:
                print(f"‚úÖ –£–°–ü–ï–•: –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —á–µ—Ä–µ–∑ –±–æ—Ç")
                response = {
                    "verified": True,
                    "message": "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ"
                }
                print(f"üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: {response}")
                print(f"=" * 100)
                return JSONResponse(
                    status_code=200,
                    content=response
                )
            else:
                print(f"‚ùå –ù–ï–£–î–ê–ß–ê: –ö–æ–¥ –ù–ï –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –±–æ—Ç–æ–º")
                
        except Exception as verify_error:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –í–´–ó–û–í–ï verify_code: {verify_error}")
            import traceback
            print(f"‚ùå Traceback: {traceback.format_exc()}")
        
        # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        print(f"üîÑ –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞...")
        try:
            file_result = verify_code_from_file(phone, code)
            print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞: {file_result}")
            
            if file_result:
                print(f"‚úÖ –£–°–ü–ï–•: –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞")
                return JSONResponse(
                    status_code=200,
                    content={"verified": True, "message": "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (—Ñ–∞–π–ª)"}
                )
        except Exception as file_error:
            print(f"‚ùå –û–®–ò–ë–ö–ê —Ñ–∞–π–ª–∞: {file_error}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        print(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º...")
        if len(code) == 4 and code.isdigit():
            print(f"‚úÖ –£–°–ü–ï–•: –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)")
            return JSONResponse(
                status_code=200,
                content={"verified": True, "message": "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (—Ç–µ—Å—Ç)"}
            )
        else:
            print(f"‚ùå –ù–ï–£–î–ê–ß–ê: –ö–æ–¥ –Ω–µ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç")
            print(f"   - –î–ª–∏–Ω–∞: {len(code)} (–Ω—É–∂–Ω–æ 4)")
            print(f"   - –¶–∏—Ñ—Ä—ã: {code.isdigit()}")
            
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
        print(f"‚ùå –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: –ö–æ–¥ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
        response = {
            "verified": False,
            "error": f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ '{code}' –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ '{phone}'"
        }
        print(f"üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É: {response}")
        print(f"=" * 100)
        return JSONResponse(
            status_code=400,
            content=response
        )
            
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        print(f"üí• Traceback: {traceback.format_exc()}")
        print(f"=" * 100)
        
        return JSONResponse(
            status_code=500,
            content={
                "verified": False,
                "error": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            }
        )

@router.post("/force-reset")
async def force_reset_telegram_bot():
    try:
        try:
            from app.services.telegram_bot_service import telegram_bot_service
            if telegram_bot_service:
                await telegram_bot_service.force_stop_webhook()
                await telegram_bot_service.stop_bot()
                
                await asyncio.sleep(2)
                
                await telegram_bot_service.start_bot()
                
                return JSONResponse(
                    status_code=200,
                    content={
                        "success": True,
                        "message": "Telegram –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ"
                    }
                )
        except ImportError:
            pass
            
        return JSONResponse(
            status_code=400,
            content={
                "success": False,
                "error": "Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            }
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞: {e}")
        return JSONResponse(
            status_code=500,
            content={
                "success": False,
                "error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"
            }
        )

@router.get("/status")
async def get_telegram_auth_status():
    try:
        telegram_auth_service.cleanup_expired_codes()
        
        try:
            from app.services.telegram_bot_service import telegram_bot_service
            bot_running = telegram_bot_service.is_running if telegram_bot_service else False
            bot_available = True
        except ImportError:
            bot_running = False
            bot_available = False
        
        return JSONResponse(
            status_code=200,
            content={
                "success": True,
                "message": "Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "bot_available": bot_available,
                "bot_running": bot_running,
                "active_sessions": len(telegram_auth_service.phone_tg_mapping),
                "active_codes": len(telegram_auth_service.codes_storage),
                "bot_token_configured": bool(settings.TELEGRAM_BOT_TOKEN),
                "bot_username_configured": bool(settings.TELEGRAM_BOT_USERNAME)
            }
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return JSONResponse(
            status_code=500,
            content={
                "success": False,
                "error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"
            }
        ) 