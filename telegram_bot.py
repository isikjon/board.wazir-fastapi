import asyncio
import logging
import os
import nest_asyncio
from typing import Dict, Optional
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import settings

# –£–ë–†–ê–ù–û: nest_asyncio.apply() - –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å uvloop
# nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –¢–û–õ–¨–ö–û –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.ERROR  # –ò–∑–º–µ–Ω–∏–ª —Å INFO –Ω–∞ ERROR
)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –æ—Ç httpx (HTTP –∑–∞–ø—Ä–æ—Å—ã)
logging.getLogger('httpx').setLevel(logging.CRITICAL)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –æ—Ç telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∏  
logging.getLogger('telegram').setLevel(logging.ERROR)
logging.getLogger('telegram.ext').setLevel(logging.ERROR)

# –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à logger –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)  # –î–ª—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º INFO –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞

class SMSBot:
    def __init__(self):
        self.application = None
        self.user_phone_mapping = {}  # user_id -> phone
        self.verification_codes = {}  # phone -> code
        self.pending_verifications = {}  # phone -> user_id
        self.bot_task = None
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º" - –í–°–ï–ì–î–ê
        keyboard = [[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)
        
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è SMS –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Wazir.\n\n"
            "üîÑ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n"
            "üëá –ö–Ω–æ–ø–∫–∞ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞",
            reply_markup=reply_markup
        )
        
    async def handle_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        user_id = update.effective_user.id
        contact = update.message.contact
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º
        if contact.user_id != user_id:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –°–í–û–ò–ú –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            )
            return
        
        phone = contact.phone_number
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        if not phone.startswith('+'):
            phone = '+' + phone
            
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –∫–æ–¥ –≤–º–µ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ
        code = None
        message = None
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞
        if phone in self.verification_codes:
            stored_data = self.verification_codes[phone]
            time_diff = datetime.now() - stored_data['timestamp']
            if time_diff <= timedelta(minutes=2):
                code = stored_data['code']
                time_left = 120 - int(time_diff.total_seconds())
                message = (
                    f"‚úÖ –ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω: {phone}\n"
                    f"üîê –í–ê–® –ö–û–î –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø: {code}\n\n"
                    f"üìù –í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n"
                    f"‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â—ë {time_left} —Å–µ–∫—É–Ω–¥.\n\n"
                    f"üîÑ –≠—Ç–æ —Ç–æ—Ç –∂–µ –∫–æ–¥, —á—Ç–æ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ"
                )
                logger.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ {code} –¥–ª—è {phone}")
            else:
                # –ö–æ–¥ –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                del self.verification_codes[phone]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–¥–∞ –≤ –ø–∞–º—è—Ç–∏, –∏—â–µ–º –≤ —Ñ–∞–π–ª–µ
        if not code:
            try:
                import json
                import os
                
                codes_file = "verification_codes.json"
                if os.path.exists(codes_file):
                    with open(codes_file, 'r', encoding='utf-8') as f:
                        file_codes = json.load(f)
                        
                    if phone in file_codes:
                        stored_data = file_codes[phone]
                        stored_time = datetime.fromisoformat(stored_data['timestamp'])
                        time_diff = datetime.now() - stored_time
                        
                        if time_diff <= timedelta(minutes=2):
                            code = stored_data['code']
                            time_left = 120 - int(time_diff.total_seconds())
                            message = (
                                f"‚úÖ –ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω: {phone}\n"
                                f"üîê –í–ê–® –ö–û–î –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø: {code}\n\n"
                                f"üìù –í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n"
                                f"‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â—ë {time_left} —Å–µ–∫—É–Ω–¥.\n\n"
                                f"üîÑ –ö–æ–¥ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
                            )
                            logger.info(f"üìÅ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ {code} –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è {phone}")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –±–æ—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                            self.verification_codes[phone] = {
                                'code': code,
                                'timestamp': stored_time,
                                'user_id': user_id
                            }
                        else:
                            # –ö–æ–¥ –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º –∏–∑ —Ñ–∞–π–ª–∞
                            del file_codes[phone]
                            with open(codes_file, 'w', encoding='utf-8') as f:
                                json.dump(file_codes, f, ensure_ascii=False, indent=2)
                            
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–¥–∞ –∏–∑ —Ñ–∞–π–ª–∞: {e}")
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –∫–æ–¥–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
        if not code:
            code = self.generate_code()
            self.verification_codes[phone] = {
                'code': code,
                'timestamp': datetime.now(),
                'user_id': user_id
            }
            message = (
                f"‚úÖ –ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω: {phone}\n"
                f"üîê –í–ê–® –ö–û–î –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø: {code}\n\n"
                f"üìù –í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n"
                f"‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 2 –º–∏–Ω—É—Ç—ã.\n\n"
                f"üÜï –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–æ–¥ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞)"
            )
            logger.info(f"üÜï –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–æ–¥ {code} –¥–ª—è {phone}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(message)
        
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º
        keyboard = [[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)
        
        await update.message.reply_text(
            "üîÑ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
        
    def generate_code(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 4-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞"""
        import random
        return ''.join(random.choices('0123456789', k=4))
        
    def verify_code(self, phone: str, code: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        if phone not in self.verification_codes:
            return False
        
        stored_data = self.verification_codes[phone]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–æ–¥ (5 –º–∏–Ω—É—Ç)
        if datetime.now() - stored_data['timestamp'] > timedelta(minutes=5):
            del self.verification_codes[phone]
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        if stored_data['code'] == code:
            # –£–¥–∞–ª—è–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            del self.verification_codes[phone]
            return True
        
        return False
        
    def get_verification_code(self, phone: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        if phone in self.verification_codes:
            return self.verification_codes[phone]['code']
        return None
        
    async def send_message_to_user(self, user_id: int, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            await self.application.bot.send_message(chat_id=user_id, text=message)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
            
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å nest_asyncio"""
        print("üöÄ [BOT] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
        
        if not settings.TELEGRAM_BOT_TOKEN:
            print("‚ùå [BOT] TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return
            
        print(f"ü§ñ [BOT] –ë–æ—Ç: @{settings.TELEGRAM_BOT_USERNAME}")
        print(f"üîë [BOT] –¢–æ–∫–µ–Ω: {settings.TELEGRAM_BOT_TOKEN[:10]}...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.application.add_handler(CommandHandler("start", self.start))
            self.application.add_handler(MessageHandler(filters.CONTACT, self.handle_contact))
            self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ —Å nest_asyncio
            self.bot_task = asyncio.create_task(self.application.run_polling(allowed_updates=Update.ALL_TYPES))
            print("‚úÖ [BOT] Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå [BOT] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise
        
    async def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        print("üõë [BOT] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
        try:
            if hasattr(self, 'bot_task') and self.bot_task:
                self.bot_task.cancel()
                try:
                    await self.bot_task
                except asyncio.CancelledError:
                    pass
            
            if hasattr(self, 'application') and self.application:
                await self.application.stop()
                
            print("‚úÖ [BOT] Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            print(f"‚ùå [BOT] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
            
    async def main(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)"""
        await self.start_bot()
        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        try:
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            await self.stop_bot()

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
sms_bot = SMSBot()

if __name__ == "__main__":
    asyncio.run(sms_bot.main()) 